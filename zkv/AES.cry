/*
 * Description: This is a Cryptol specification for the Advanced
 * Encryption Standard (AES), also called Rijndael
 * [FIPS-PUB-197]. This specification is specialized to Nb = 4 and
 * supports the standard key sizes of 128, 192, and 256-bits.
 */

module AES where

/**
 * The main AES encrypt function. This is simply a bit-level interface
 * to the Cipher function [FIPS-PUB-197], Section 5.1.
 */

encrypt : {k} (Key k) => [k] -> [128] -> [128]
encrypt key plain = join (Cipher key (split plain))

/**
 * The main AES decrypt function. This is simply a bit-level interface
 * to the InvCipher function [FIPS-PUB-197], Section 5.3.
 */

decrypt : {k} (Key k) => [k] -> [128] -> [128]
decrypt key cipher = join (InvCipher key (split cipher))

private

/**
 * This constraint enforces the standard key sizes of 128, 192. and
 * 256-bits.
 */
 
type constraint Key k = (fin k, k % 64 == 0, k / 64 >= 2, k / 64 <= 4)

/**
 * This sequence of bytes comprises the input, output, State, and
 * Round Key [FIPS-PUB-197], Section 2.1.
 */

type Block_t = [16][8]

/**
 * This sequence of bytes represents a 32-bit word [FIPS-PUB-197],
 * Section 2.1.
 */

type Word_t = [4][8]

/**
 * Number of 32-bit words comprising the Cipher Key. For this
 * standard, Nk = 4, 6, or 8 [FIPS-PUB-197], Section 2.1 and Section
 * 6.3.
 */

type Nk k = k / 32

/**
 * Number of rounds. For this standard, Nr = 10, 12, or 14
 * [FIPS-PUB-197], Section 2.1 and Section 6.3.
 */

type Nr k = Nk k + 6

/**
 * The round constant word array [FIPS-PUB-197], Section 2.1 and
 * 5.2. Constants are use here rather than computing the values in
 * place.
 */

Rcon : [11]Word_t
Rcon = [ zero  // undefined
       , [0x01, 0x00, 0x00, 0x00], [0x02, 0x00, 0x00, 0x00]
       , [0x04, 0x00, 0x00, 0x00], [0x08, 0x00, 0x00, 0x00]
       , [0x10, 0x00, 0x00, 0x00], [0x20, 0x00, 0x00, 0x00]
       , [0x40, 0x00, 0x00, 0x00], [0x80, 0x00, 0x00, 0x00]
       , [0x1b, 0x00, 0x00, 0x00], [0x36, 0x00, 0x00, 0x00]
       ]

/**
 * Multiplication by x (i.e., 0b00000010 or 0x02) can be implemented
 * at the byte level as a left shift and a subsequent conditional
 * bitwise XOR with 0x1b [FIPS-PUB-197], Section 4.2.1.
 */

xtime : [8] -> [8]
xtime x = x << 1 ^ (if head x then 0x1b else 0x00)

/**
 * Multiplication of two bytes representing coefficients of
 * polynomials in GF 2^^8 [FIPS-PUB-197], Section 4.3.
 */

(*.) : [8] -> [8] -> [8]
(*.) x y = foldl (\a xi -> xtime a ^ if xi then y else 0x00) 0x00 x

/**
 * S-box [FIPS-PUB-197], Section 5.1.1, Figure 7.
 */

Sbox : [256][8]
Sbox = [ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76
       , 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0
       , 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15
       , 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75
       , 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84
       , 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf
       , 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8
       , 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2
       , 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73
       , 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb
       , 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79
       , 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08
       , 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a
       , 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e
       , 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf
       , 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 ]

/**
 * Inverse S-box [FIPS-PUB-197], Section 5.3.2, Figure 14.
 */

InvSbox : [256][8]
InvSbox = [ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb
          , 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb
          , 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e
          , 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25
          , 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92
          , 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84
          , 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06
          , 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b
          , 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73
          , 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e
          , 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b
          , 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4
          , 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f
          , 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef
          , 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61
          , 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d ]

/**
 * Property demonstrating that Sbox and InvSbox are inverses.
 */

SboxInverts : [8] -> Bit
property SboxInverts x = InvSbox @ (Sbox @ x) == x

/**
 * SubBytes transformation [FIPS-PUB-197], Section 5.1.1.
 */

SubBytes : Block_t -> Block_t
SubBytes xs = Sbox @@ xs

/**
 * InvSubBytes transformation [FIPS-PUB-197], Section 5.3.2.
 */

InvSubBytes : Block_t -> Block_t
InvSubBytes xs = InvSbox @@ xs

/**
 * Property demonstrating that SubBytes and InvSubBytes are inverses.
 */

property SubBytesInverts xs = InvSubBytes (SubBytes xs) == xs

/**
 * ShiftRows transformation [FIPS-PUB-197], Section 5.1.2.
 */

ShiftRows : Block_t -> Block_t
ShiftRows xs = xs @@ [0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11]

/**
 * InvShiftRows transformation [FIPS-PUB-197], Section 5.3.1.
 */

InvShiftRows : Block_t -> Block_t
InvShiftRows xs = xs @@ [0, 13, 10, 7, 4, 1, 14, 11, 8, 5, 2, 15, 12, 9, 6, 3]

/**
 * Property demonstrating that ShiftRows and InvShiftRows are
 * inverses.
 */

property ShiftRowsInverts xs = InvShiftRows (ShiftRows xs) == xs

/**
 * MixColumns transformation [FIPS-PUB-197], Section 5.1.3.
 */

MixColumns : Block_t -> Block_t
MixColumns xs = join (map MixColumnsStep (split xs))

/**
 * One step of MixColumns [FIPS-PUB-197], Section 5.1.3.
 */
 
MixColumnsStep : Word_t -> Word_t
MixColumnsStep [S0, S1, S2, S3] = [S0', S1', S2', S3']
  where
    S0' = (0x02 *. S0) ^ (0x03 *. S1) ^ S2           ^ S3
    S1' = S0           ^ (0x02 *. S1) ^ (0x03 *. S2) ^ S3
    S2' = S0           ^ S1           ^ (0x02 *. S2) ^ (0x03 *. S3)
    S3' = (0x03 *. S0) ^ S1           ^ S2           ^ (0x02 *. S3)

/**
 * InvMixColumns transformation [FIPS-PUB-197], Section 5.3.3.
 */

InvMixColumns : Block_t -> Block_t
InvMixColumns xs = join (map InvMixColumnsStep (split xs))

/**
 * One step of InvMixColumns [FIPS-PUB-197], Section 5.3.3.
 */

InvMixColumnsStep : Word_t -> Word_t
InvMixColumnsStep [S0, S1, S2, S3] = [S0', S1', S2', S3']
  where
    S0' = (0x0e *. S0) ^ (0x0b *. S1) ^ (0x0d *. S2) ^ (0x09 *. S3)
    S1' = (0x09 *. S0) ^ (0x0e *. S1) ^ (0x0b *. S2) ^ (0x0d *. S3)
    S2' = (0x0d *. S0) ^ (0x09 *. S1) ^ (0x0e *. S2) ^ (0x0b *. S3)
    S3' = (0x0b *. S0) ^ (0x0d *. S1) ^ (0x09 *. S2) ^ (0x0e *. S3)

/**
 * Property demonstrating that the step functions of MixColumns and
 * InvMixColumns are inverses.
 */

property MixColumnsStepInverts xs = InvMixColumnsStep (MixColumnsStep xs) == xs

/**
 * Property demonstrating that MixColumns and InvMixColumns are
 * inverses.
 */

property MixColumnsInverts xs = InvMixColumns (MixColumns xs) == xs

/**
 * Performs one round of AES encryption [FIPS-PUB-197], Section 5.1.
 */

Round : Block_t -> Block_t -> Block_t
Round xs ki = MixColumns (ShiftRows (SubBytes xs)) ^ ki

/**
 * Performs one round of AES decryption [FIPS-PUB-197], Section 5.3.
 */

InvRound : Block_t -> Block_t -> Block_t
InvRound xs ki = InvSubBytes (InvShiftRows (InvMixColumns (xs ^ ki)))

/**
 * Property demonstrating that Round and InvRound are inverses.
 */

property RoundInverts xs ki = InvRound (Round xs ki) ki == xs

/**
 * The Cipher function performs AES encryption [FIPS-PUB-197], Section
 * 5.1.
 */

Cipher : {k} (Key k) => [k] -> Block_t -> Block_t
Cipher key plain = cipher
  where
    [k0] # ks # [kr] = KeyExpansion key
    pre  = plain ^ k0
    mid  = foldl Round pre ks
    cipher = ShiftRows (SubBytes mid) ^ kr

/**
 * The InvCipher function performs AES decryption [FIPS-PUB-197],
 * Section 5.1.
 */

InvCipher : {k} (Key k) => [k] -> Block_t -> Block_t
InvCipher key cipher = plain
  where
    [k0] # ks # [kr] = KeyExpansion key
    pre  = InvSubBytes (InvShiftRows (cipher ^ kr))
    mid  = foldl InvRound pre (reverse ks)
    plain = mid ^ k0

/**
 * A property demonstrating that Cipher and InvCipher are inverses.
 */

CipherInverts : {k} (Key k) => [k] -> Block_t -> Bit
property CipherInverts key plain =
    InvCipher key (Cipher key plain) == plain

/**
 * Takes a four-byte input word and applies the S-box to each of the
 * four bytes to produce an output word [FIPS-PUB-197], Section 5.2.
 */

SubWord : Word_t -> Word_t
SubWord w = Sbox @@ w

/**
 * Takes a word [a0,a1,a2,a3] as input, performs a cyclic permutation,
 * and returns the word [a1,a2,a3,a0] [FIPS-PUB-197], Section 5.2.
 */

RotWord : Word_t -> Word_t
RotWord [a0, a1, a2, a3] = [a1, a2, a3, a0]

/**
 * The main AES key expansion routine [FIPS-PUB-197], Section 5.2.
 */

KeyExpansion : {k} (Key k) => [k] -> [Nr k + 1]Block_t
KeyExpansion k = split (split (join (join w)))
  where
    Nk = `(Nk k)
    k' = split (split k) : [Nk k]Word_t
    w  = [ if i < Nk      then k'@i
            | i % Nk == 0 then w@(i-Nk) ^ SubWord (RotWord (w@(i-1))) ^ Rcon@(i / Nk)
            | i % Nk == 4 /\ Nk > 6 then w@(i-Nk) ^ SubWord (w@(i-1))
           else w@(i-Nk) ^ w@(i-1)
         | i <- [ 0 .. 4 * (Nr k + 1) - 1 ] ]

property test =
    (encrypt 0x000102030405060708090a0b0c0d0e0f pt ==
             0x69c4e0d86a7b0430d8cdb78070b4c55a)
 /\ (decrypt 0x000102030405060708090a0b0c0d0e0f
             0x69c4e0d86a7b0430d8cdb78070b4c55a == pt)
 /\ (encrypt 0x000102030405060708090a0b0c0d0e0f1011121314151617 pt ==
             0xdda97ca4864cdfe06eaf70a0ec0d7191)
 /\ (decrypt 0x000102030405060708090a0b0c0d0e0f1011121314151617
             0xdda97ca4864cdfe06eaf70a0ec0d7191 == pt)
 /\ (encrypt 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f pt ==
             0x8ea2b7ca516745bfeafc49904b496089)
 /\ (decrypt 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f
             0x8ea2b7ca516745bfeafc49904b496089 == pt)
  where
    pt = 0x00112233445566778899aabbccddeeff
