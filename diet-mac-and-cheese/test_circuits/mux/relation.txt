version 2.0.0;
circuit;
@type field 0x2;
@plugin mux_v0;
@begin
@function(my_mux, @out: 0:3, 0:1, @in: 0:1, 0:3, 0:1, 0:3, 0:1)
  @plugin(mux_v0, strict);
@new(0: $0x4 ... $0xb);
$0x0 <- @private(0x0);
$0x1 <- @private(0x0);
$0x4 <- @public(0x0);
$0x5 <- @public(0x0);
$0x6 <- @public(0x0);
$0x7 <- @public(0x0);
$0x8 <- @public(0x0);
$0x9 <- @public(0x0);
$0xa <- @public(0x0);
$0xb <- @public(0x0);
$0xc ... $0xe, $0xf ... $0xf <- @call(my_mux, $0x0 ... $0x0, $0x4 ... $0x6, $0x7 ... $0x7, $0x8 ... $0xa, $0xb ... $0xb);
@assert_zero(0x0: $0xc);
@assert_zero(0x0: $0xd);
@assert_zero(0x0: $0xe);
@assert_zero(0x0: $0xf);
$0x10 ... $0x12, $0x13 ... $0x13 <- @call(my_mux, $0x1 ... $0x1, $0x4 ... $0x6, $0x7 ... $0x7, $0x8 ... $0xa, $0xb ... $0xb);
$0x14 <- @addc(0x0: $0x10, <0x1>);
$0x15 <- @addc(0x0: $0x11, <0x1>);
$0x16 <- @addc(0x0: $0x12, <0x1>);
$0x17 <- @addc(0x0: $0x13, <0x1>);
@assert_zero(0x0: $0x14);
@assert_zero(0x0: $0x15);
@assert_zero(0x0: $0x16);
@assert_zero(0x0: $0x17);
@end
