version 2.0.0;
circuit;
@type field 0x1fffffffffffffff;
@plugin galois_poly_v0;
@begin
@function(my_prod_eq, @in: 0:11, 0:2, 0:12)
  @plugin(galois_poly_v0, prod_eq);
@new(0: $0x0 ... $0xa);
$0x0 <- @private(0x0);
$0x1 <- @private(0x0);
$0x2 <- @private(0x0);
$0x3 <- @private(0x0);
$0x4 <- @private(0x0);
$0x5 <- @private(0x0);
$0x6 <- @private(0x0);
$0x7 <- @private(0x0);
$0x8 <- @private(0x0);
$0x9 <- @private(0x0);
$0xa <- @private(0x0);
@new(0: $0xb ... $0xc);
$0xb <- @private(0x0);
$0xc <- @private(0x0);
@new(0: $0xd ... $0x18);
$0xd <- @public(0x0);
$0xe <- @public(0x0);
$0xf <- @public(0x0);
$0x10 <- @public(0x0);
$0x11 <- @public(0x0);
$0x12 <- @public(0x0);
$0x13 <- @public(0x0);
$0x14 <- @public(0x0);
$0x15 <- @public(0x0);
$0x16 <- @public(0x0);
$0x17 <- @public(0x0);
$0x18 <- @public(0x0);
@call(my_prod_eq, $0x0 ... $0xa, $0xb ... $0xc, $0xd ... $0x18);
@end
