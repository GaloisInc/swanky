version 2.0.0;
circuit;
@plugin disjunction_v0;
@type field 2;

@begin

// assert(a == b);
// return c;
@function(clause_cond17, @out: 0:1, @in: 0:3)
    $4 <- @mulc($2, <1>); // b * -1
    $5 <- @add($1, $4);   // a + (b * -1)
    @assert_zero($5);

    $0 <- $3;
@end

// assert(a == c);
// return b;
@function(clause_cond21, @out: 0:1, @in: 0:3)
    $4 <- @mulc($3, <1>); // c * -1
    $5 <- @add($1, $4);   // a + (c * -1)
    @assert_zero($5);

    $0 <- $2;
@end

// assert(b == c);
// return a;
@function(clause_cond31, @out: 0:1, @in: 0:3)
    $4 <- @mulc($3, <1>); // c * -1
    $5 <- @add($2, $4);   // b + (c * -1))
    @assert_zero($5);

    $0 <- $1;
@end

// branch_example is roughly equivalent to the following pseudo-C:
// F branch_example(F cond, F a, F b, F c) {
//     switch (cond) {
//         case 17:
//             assert(a == b);
//             return c;
//         case 21:
//             assert(a == c);
//             return b;
//         case 31:
//             assert(b == c);
//             return a;
//         default:
//             assert(false);
//     }
// }
@function(branch_example, @out: 0:1, @in: 0:5, 0:3)
    @plugin(disjunction_v0, switch, strict, 17, clause_cond17, 21, clause_cond21, 31, clause_cond31, @private: 0:0);

// Guard value. Valid are 17 (10001), 21 (10101), and 31 (11111).
@new($0 ... $4);
$0 <- <1>;
$1 <- <1>;
$2 <- <1>;
$3 <- <1>;
$4 <- <1>;

// Any valid guard should pass with these inputs.
@new($5 ... $7);
$5 <- <1>;
$6 <- <1>;
$7 <- <1>;

$8 <- @call(branch_example, $0 ... $4, $5 ... $7);
@end
