var searchIndex = JSON.parse('{\
"diet_mac_and_cheese":{"doc":"<code>diet_mac_and_cheese</code> provides a diet/light implementation …","t":[13,3,3,4,13,13,13,13,13,13,6,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12],"n":["BackendError","DietMacAndCheeseProver","DietMacAndCheeseVerifier","Error","IoError","OcelotError","Private","Private","Public","Public","Result","ValueProver","ValueVerifier","add","add","addc","addc","assert_zero","assert_zero","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","drop","drop","eq","eq","finalize","finalize","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bytes_le","init","init","input_private","input_private","input_public","input_public","into","into","into","into","into","mul","mul","mulc","mulc","provide","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","0","0"],"q":["diet_mac_and_cheese","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","diet_mac_and_cheese::Error","","","diet_mac_and_cheese::ValueProver","","diet_mac_and_cheese::ValueVerifier",""],"d":["Error specific to Diet Mac’c’Cheese.","Prover for Diet Mac’n’Cheese.","Verifier for Diet Mac’n’Cheese.","Error type specific to Diet Mac’n’Cheese and wrapping …","An I/O error has occurred.","An Ocelot error has occurred.","","","","","Result type specific to Diet Mac’n’Cheese.","Type of values produced by and consumed by the Prover.","Type of values produced by and consumed by the Verifier.","Add two values.","Add two values.","Add a value and a constant.","Add a value and a constant.","Assert a value is zero.","Assert a value is zero.","","","","","","","","","","","","","","","","","","","","","<code>finalize</code> execute its queued multiplication and zero checks.","<code>finalize</code> execute its internal queued multiplication and …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Converts a little-endian byte slice to a field element. …","Initialize the prover by providing a channel, a random …","Initialize the verifier by providing a channel, a random …","Input a private value and prover value.","Input a private value and verifier value.","Input a public value and wraps it in a prover value.","Input a public value and wraps it in a verifier value.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Multiply two values.","Multiply two values.","Multiply a value and a constant.","Multiply a value and a constant.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[16,0,0,0,16,16,6,9,6,9,0,0,0,5,8,5,8,5,8,5,8,6,9,16,5,8,6,9,16,6,9,6,9,6,9,5,8,6,9,5,8,6,9,16,16,5,8,6,9,16,16,16,0,5,8,5,8,5,8,5,8,6,9,16,5,8,5,8,16,6,9,16,5,8,6,9,16,5,8,6,9,16,5,8,6,9,16,5,8,6,9,16,24,25,26,27,28,29,30],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[[5,[1,2,[0,[3,4]]]],6,6],[[7,[[6,[1]]]]]],[[[8,[1,2,[0,[3,4]]]],9,9],[[7,[[9,[1]]]]]],[[[5,[1,2,[0,[3,4]]]],6],[[7,[[6,[1]]]]]],[[[8,[1,2,[0,[3,4]]]],9],[[7,[[9,[1]]]]]],[[[5,[1,2,[0,[3,4]]]],6],7],[[[8,[1,2,[0,[3,4]]]],9],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[[0,[10,1]]]]],[[6,[[0,[10,1]]]]]],[[[9,[[0,[10,1]]]]],[[9,[[0,[10,1]]]]]],[[]],[[]],[[],[[6,[1]]]],[[],[[9,[1]]]],[[[5,[1,2,[0,[3,4]]]]]],[[[8,[1,2,[0,[3,4]]]]]],[[[6,[[0,[11,1]]]],6],12],[[[9,[[0,[11,1]]]],9],12],[[[5,[1,2,[0,[3,4]]]]],7],[[[8,[1,2,[0,[3,4]]]]],7],[[[6,[[0,[13,1]]]],14],15],[[[9,[[0,[13,1]]]],14],15],[[16,14],15],[[16,14],15],[[]],[[]],[[]],[[]],[17,16],[[]],[18,16],[[],[[7,[1]]]],[[[0,[3,4]],19,19],[[20,[[5,[1,2,[0,[3,4]]]],17]]]],[[[0,[3,4]],19,19],[[20,[[8,[1,2,[0,[3,4]]]],17]]]],[[[5,[1,2,[0,[3,4]]]]],[[7,[[6,[1]]]]]],[[[8,[1,2,[0,[3,4]]]]],[[7,[[9,[1]]]]]],[[[5,[1,2,[0,[3,4]]]]],[[6,[1]]]],[[[8,[1,2,[0,[3,4]]]]],[[9,[1]]]],[[]],[[]],[[]],[[]],[[]],[[[5,[1,2,[0,[3,4]]]],6,6],[[7,[[6,[1]]]]]],[[[8,[1,2,[0,[3,4]]]],9,9],[[7,[[9,[1]]]]]],[[[5,[1,2,[0,[3,4]]]],6],[[7,[[6,[1]]]]]],[[[8,[1,2,[0,[3,4]]]],9],[[7,[[9,[1]]]]]],[21],[[]],[[]],[[],22],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],23],[[],23],[[],23],[[],23],[[],23],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0],"p":[[8,"FiniteField"],[8,"AbstractChannel"],[8,"CryptoRng"],[8,"Rng"],[3,"DietMacAndCheeseProver"],[4,"ValueProver"],[6,"Result"],[3,"DietMacAndCheeseVerifier"],[4,"ValueVerifier"],[8,"Clone"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Error"],[4,"Error"],[3,"Error"],[3,"LpnParams"],[4,"Result"],[3,"Demand"],[3,"String"],[3,"TypeId"],[13,"BackendError"],[13,"IoError"],[13,"OcelotError"],[13,"Public"],[13,"Private"],[13,"Public"],[13,"Private"]]},\
"fancy_garbling":{"doc":"<code>fancy-garbling</code> provides boolean and arithmetic garbling …","t":[4,8,8,3,8,8,3,8,3,8,16,16,3,8,8,8,2,8,8,3,8,16,16,13,13,13,8,3,3,3,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,10,11,11,11,11,0,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,5,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,12,12,12,13,13,3,4,3,4,3,8,3,8,13,13,13,8,13,13,13,13,16,8,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,5,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,3,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,4,13,13,13,13,4,13,13,4,13,4,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,8,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5],"n":["AllWire","ArithmeticBundleGadgets","ArithmeticWire","BinaryBundle","BinaryBundleGadgets","BinaryGadgets","Bundle","BundleGadgets","CrtBundle","CrtGadgets","Error","Error","Evaluator","Fancy","FancyArithmetic","FancyBinary","FancyError","FancyInput","FancyReveal","Garbler","HasModulus","Item","Item","Mod2","Mod3","ModN","WireLabel","WireMod2","WireMod3","WireModQ","add","add","add","add_bundles","add_bundles","add_many","add_many","adder","adder","and","and","and","and","and","and_many","and_many","as_block","as_block","as_block","as_block","as_block","bin_abs","bin_abs","bin_addition","bin_addition","bin_addition_no_carry","bin_addition_no_carry","bin_and","bin_and","bin_cmul","bin_cmul","bin_constant_bundle","bin_constant_bundle","bin_demux","bin_demux","bin_div","bin_div","bin_encode","bin_encode","bin_encode_many","bin_encode_many","bin_encode_wire","bin_eq_bundles","bin_eq_bundles","bin_geq","bin_geq","bin_lt","bin_lt","bin_lt_signed","bin_lt_signed","bin_max","bin_max","bin_mul","bin_mul","bin_multiplex","bin_multiplex","bin_multiplex_constant_bits","bin_multiplex_constant_bits","bin_multiplication_lower_half","bin_multiplication_lower_half","bin_or","bin_or","bin_output","bin_output","bin_outputs","bin_outputs","bin_receive","bin_receive","bin_receive_many","bin_receive_many","bin_reveal","bin_reveal","bin_reveal_many","bin_reveal_many","bin_rsa","bin_rsa","bin_rsl","bin_rsl","bin_shr","bin_shr","bin_subtraction","bin_subtraction","bin_twos_complement","bin_twos_complement","bin_xor","bin_xor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit","classic","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmul","cmul","cmul","cmul","cmul","cmul_eq","cmul_eq","cmul_eq","cmul_eq","cmul_eq","cmul_mov","cmul_mov","color","color","color","color","color","composite_modulus","conditional_select","constant","constant","constant","constant_bundle","constant_bundle","crt_add","crt_add","crt_cexp","crt_cexp","crt_cmul","crt_cmul","crt_constant_bundle","crt_constant_bundle","crt_div","crt_div","crt_encode","crt_encode","crt_encode_many","crt_encode_many","crt_encode_wire","crt_fractional_mixed_radix","crt_fractional_mixed_radix","crt_geq","crt_geq","crt_lt","crt_lt","crt_max","crt_max","crt_mul","crt_mul","crt_output","crt_output","crt_outputs","crt_outputs","crt_receive","crt_receive","crt_receive_many","crt_receive_many","crt_relu","crt_relu","crt_rem","crt_rem","crt_reveal","crt_reveal","crt_reveal_many","crt_reveal_many","crt_sgn","crt_sgn","crt_sign","crt_sign","crt_sub","crt_sub","crt_to_pmr","crt_to_pmr","default","default","default","delta","depth_informer","deref","deref","deref_mut","digits","digits","digits","digits","digits","dummy","encode","encode","encode_bundle","encode_bundle","encode_bundles","encode_bundles","encode_many","encode_many_wires","encode_wire","eq","eq","eq","eq","eq_bundles","eq_bundles","errors","extract","extract","extract","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_block","from_block","from_block","from_block","from_block","get_deltas","hash","hash","hash_to_mod","hash_to_mod","hash_to_mod","hash_to_mod","hash_to_mod","hash_wires","hashback","hashback","index","informer","insert","into","into","into","into","into","into","into","into","into","is_binary","iter","mask","mask","minus","minus","minus_eq","minus_eq","minus_mov","minus_mov","mixed_radix_addition","mixed_radix_addition","mixed_radix_addition_msb_only","mixed_radix_addition_msb_only","mod_change","mod_change","moduli","modulus","modulus","modulus","modulus","modulus","mul","mul","mul","mul_bundles","mul_bundles","multiplex","multiplex","mux","mux","mux_constant_bits","mux_constant_bits","negate","negate","negate","negate","negate","negate","negate","negate_eq","negate_eq","negate_eq","negate_eq","negate_eq","negate_mov","negate_mov","new","new","new","new","new","or","or","or_many","or_many","output","output","output","output_bundle","output_bundle","output_bundles","output_bundles","outputs","outputs","pad","plus","plus","plus_eq","plus_eq","plus_eq","plus_eq","plus_eq","plus_mov","plus_mov","pmr_geq","pmr_geq","pmr_lt","pmr_lt","pop","proj","proj","proj","push","rand","rand","rand","rand","rand","rand_delta","rand_delta","rand_delta","rand_delta","rand_delta","read_wire","receive","receive","receive_bundle","receive_bundle","receive_many","receive_many_bundles","receive_many_bundles","reveal","reveal","reveal","reveal_bundle","reveal_bundle","reveal_many","reveal_many","reveal_many_bundles","reveal_many_bundles","reverse","send_wire","shift","shift","shift_extend","shift_extend","size","sub","sub","sub","sub_bundles","sub_bundles","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","twopac","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","util","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wires","with_moduli","xor","xor","xor","xor","xor","xor_many","xor_many","zero","zero","zero","zero","zero","0","0","0","Add","And","ArithmeticCircuit","ArithmeticGate","BinaryCircuit","BinaryGate","CircuitBuilder","CircuitInfo","CircuitRef","CircuitType","Cmul","Constant","Constant","EvaluableCircuit","EvaluatorInput","EvaluatorInput","GarblerInput","GarblerInput","Gate","GateType","Inv","Mul","Proj","Sub","Xor","add","and","and","bin_evaluator_input","bin_garbler_input","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmul","constant","crt_evaluator_input","crt_garbler_input","eq","eq","eq","eq","eq","eval","eval","eval","eval_plain","evaluator_input","evaluator_input_mod","evaluator_input_mod","evaluator_input_mod","evaluator_inputs","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","garbler_input","garbler_input_mod","garbler_input_mod","garbler_input_mod","garbler_inputs","get_evaluator_input_refs","get_evaluator_input_refs","get_evaluator_input_refs","get_garbler_input_refs","get_garbler_input_refs","get_garbler_input_refs","get_num_nonfree_gates","get_num_nonfree_gates","get_num_nonfree_gates","get_output_refs","get_output_refs","get_output_refs","increment_nonfree_gates","increment_nonfree_gates","increment_nonfree_gates","into","into","into","into","into","into","make_constant","make_constant","make_constant","make_evaluator_input","make_evaluator_input","make_evaluator_input","make_garbler_input","make_garbler_input","make_garbler_input","modulus","modulus","mul","negate","negate","new","new","new","new","noutputs","num_evaluator_inputs","num_garbler_inputs","output","parse","print_info","print_info","print_info","proj","push_const_ref","push_const_ref","push_const_ref","push_evaluator_input_ref","push_evaluator_input_ref","push_evaluator_input_ref","push_garbler_input_ref","push_garbler_input_ref","push_garbler_input_ref","push_gates","push_gates","push_gates","push_modulus","push_modulus","push_modulus","push_output_ref","push_output_ref","push_output_ref","sub","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","xor","xor","c","id","id","id","id","out","out","out","out","out","tt","val","xref","xref","xref","xref","xref","yref","yref","yref","id","id","id","out","out","out","val","xref","xref","xref","yref","yref","Encoder","GarbledCircuit","GarbledReader","GarbledWriter","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","encode_evaluator_input","encode_evaluator_inputs","encode_garbler_input","encode_garbler_inputs","eval","flush","fmt","fmt","fmt","fmt","from","from","from","from","garble","into","into","into","into","new","new","new","num_evaluator_inputs","num_garbler_inputs","read","size","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write","DepthError","DepthInformer","DepthItem","ProjUnsupported","Underlying","add","and","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmul","constant","encode_many","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","modulus","mul","negate","new","output","proj","receive_many","reveal","sub","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","xor","0","Dummy","DummyVal","add","and","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmul","constant","encode","encode_many","fmt","from","from","into","into","modulus","mul","negate","new","new","output","proj","receive_many","reveal","sub","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","val","vzip","vzip","xor","ArgNotBinary","AsymmetricHalfGateModuliMax8","CircuitBuilderError","CircuitParserError","CommunicationError","CommunicationError","DecodingFailed","DeltaRequired","DummyError","EncodingError","EncodingError","EvaluatorError","EvaluatorError","FancyError","FancyError","FancyError","FancyError","FancyError","FancyError","GarblerError","GarblerError","InvalidArg","InvalidArgMod","InvalidArgNum","InvalidTruthTable","IoError","IoError","NoTruthTable","NotEnoughEvaluatorInputs","NotEnoughEvaluatorInputs","NotEnoughGarblerInputs","NotEnoughGarblerInputs","OtError","ParseGateError","ParseIntError","ParseLineError","RegexError","ReuseUndefined","TruthTableRequired","TwopacError","UnequalModuli","UninitializedValue","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","provide","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","0","0","0","0","got","got","needed","needed","0","0","0","0","0","0","0","0","Informer","InformerStats","add","and","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmul","constant","encode_many","evaluator_input_moduli","fmt","fmt","from","from","garbler_input_moduli","into","into","mul","negate","new","num_adds","num_ciphertexts","num_cmuls","num_consts","num_evaluator_inputs","num_garbler_inputs","num_muls","num_output_ciphertexts","num_outputs","num_projs","num_subs","output","proj","receive_many","reveal","stats","sub","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","underlying","vzip","vzip","xor","semihonest","Evaluator","Garbler","add","add","and","and","and","and","borrow","borrow","borrow_mut","borrow_mut","cmul","cmul","constant","constant","deref","deref_mut","encode","encode_many","encode_many","from","from","get_channel","get_channel","into","into","mul","mul","negate","negate","negate","negate","new","new","output","output","proj","proj","receive","receive_many","receive_many","reveal","reveal","sub","sub","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","xor","xor","xor","xor","NPRIMES","PRIMES","RngExt","as_base_q_u128","as_mixed_radix","base_modulus_with_width","base_primes_with_width","base_q_add_eq","crt","crt_factor","crt_inv","crt_inv_factor","digits_per_u128","factor","from_base_q","from_mixed_radix","gen_block","gen_bool","gen_modulus","gen_prime","gen_u128","gen_u16","gen_u32","gen_u64","gen_usable_block","gen_usable_composite_modulus","gen_usable_factors","gen_usize","generate_deltas","inv","is_power_of_2","modulus_with_nprimes","modulus_with_width","output_tweak","primes_with_width","product","tweak","tweak2","u128_from_bits","u128_to_bits"],"q":["fancy_garblingfancy_garbling::AllWire","","","fancy_garbling::circuitfancy_garbling::circuit::ArithmeticGate","","","","","","","","","","","","","","","","","","","","fancy_garbling::circuit::BinaryGate","","","","","","","","","","","","fancy_garbling::classic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fancy_garbling::depth_informer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fancy_garbling::depth_informer::DepthError","fancy_garbling::dummy","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fancy_garbling::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fancy_garbling::errors::CircuitBuilderError","fancy_garbling::errors::CircuitParserError","","","","fancy_garbling::errors::DummyError","fancy_garbling::errors::EvaluatorError","","fancy_garbling::errors::FancyError","","","","","fancy_garbling::errors::GarblerError","","","fancy_garbling::errors::TwopacError","","","","","fancy_garbling::informer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fancy_garbling::twopac","fancy_garbling::twopac::semihonest","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fancy_garbling::util","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The core wire-label type.","Arithmetic operations on wire bundles, extending the …","Marker trait indicating an arithmetic wire","Bundle which is explicitly binary representation.","Binary operations on wire bundles, extending the …","Extension trait for <code>Fancy</code> providing gadgets that operate …","A collection of wires, useful for the garbled gadgets …","Extension trait for Fancy which provides Bundle …","Bundle which is explicitly CRT-representation.","Extension trait for <code>Fancy</code> providing advanced CRT gadgets …","The type of error that this Fancy object emits.","Errors which may be thrown by the users of Fancy.","Streaming evaluator using a callback to receive …","DSL for the basic computations supported by <code>fancy-garbling</code>.","DSL for arithmetic computation.","Fancy DSL providing binary operations","","Convenience functions for encoding input to Fancy objects.","Trait to describe Fancy objects which can reveal outputs …","Streams garbled circuit ciphertexts through a callback.","An object that has some modulus. Basic object of <code>Fancy</code> …","The type that this Fancy object operates over.","The underlying wire datatype created by an object …","Modulo2 Wire","Modulo3 Wire","Modulo q Wire: 3 &lt; q &lt; 2^16","Trait implementing a wire that can be used for secure …","Representation of a <code>mod-2</code> wire.","Representation of a <code>mod-3</code> wire.","Representation of a <code>mod-q</code> wire.","Add <code>x</code> and <code>y</code>.","","","Add two wire bundles pairwise, zipping addition.","Add two wire bundles pairwise, zipping addition.","Sum up a slice of wires.","Sum up a slice of wires.","Binary adder. Returns the result and the carry.","Binary adder. Returns the result and the carry.","Binary And","","","","Use binary and_gate","Returns 1 if all wires equal 1.","Returns 1 if all wires equal 1.","Pack the wire into a <code>Block</code>.","","","","","Compute the absolute value of a binary bundle.","Compute the absolute value of a binary bundle.","Binary addition. Returns the result and the carry.","Binary addition. Returns the result and the carry.","Binary addition. Avoids creating extra gates for the final …","Binary addition. Avoids creating extra gates for the final …","And the bits of two bundles together pairwise.","And the bits of two bundles together pairwise.","Write the constant in binary and that gives you the shift …","Write the constant in binary and that gives you the shift …","Create a constant bundle using base 2 inputs.","Create a constant bundle using base 2 inputs.","Demux a binary bundle into a unary vector.","Demux a binary bundle into a unary vector.","Divider","Divider","Encode a binary input bundle.","Encode a binary input bundle.","Encode many binary input bundles.","Encode many binary input bundles.","Encode a <code>BinaryBundle</code>, producing zero wires as well as …","Compute <code>x == y</code> for binary bundles.","Compute <code>x == y</code> for binary bundles.","Returns 1 if <code>x &gt;= y</code>.","Returns 1 if <code>x &gt;= y</code>.","Returns 1 if <code>x &lt; y</code>.","Returns 1 if <code>x &lt; y</code>.","Returns 1 if <code>x &lt; y</code> (signed version)","Returns 1 if <code>x &lt; y</code> (signed version)","Compute the maximum bundle in <code>xs</code>.","Compute the maximum bundle in <code>xs</code>.","Full multiplier","Full multiplier","Multiplex gadget for binary bundles","Multiplex gadget for binary bundles","If <code>x=0</code> return <code>c1</code> as a bundle of constant bits, else return …","If <code>x=0</code> return <code>c1</code> as a bundle of constant bits, else return …","Binary multiplication.","Binary multiplication.","Or the bits of two bundles together pairwise.","Or the bits of two bundles together pairwise.","Output a binary bundle and interpret the result as a <code>u128</code>.","Output a binary bundle and interpret the result as a <code>u128</code>.","Output a slice of binary bundles and interpret the results …","Output a slice of binary bundles and interpret the results …","Receive an binary input bundle.","Receive an binary input bundle.","Receive many binary input bundles.","Receive many binary input bundles.","Reveal a binary bundle to all parties.","Reveal a binary bundle to all parties.","Reveal many binary bundles to all parties.","Reveal many binary bundles to all parties.","arithmetic right shift (shifts the sign of the MSB into …","arithmetic right shift (shifts the sign of the MSB into …","logical right shift (shifts 0 into the empty spaces)","logical right shift (shifts 0 into the empty spaces)","shift a value right by a constant, filling space on the …","shift a value right by a constant, filling space on the …","Subtract two binary bundles. Returns the result and …","Subtract two binary bundles. Returns the result and …","Compute the twos complement of the input bundle (which …","Compute the twos complement of the input bundle (which …","Xor the bits of two bundles together pairwise.","Xor the bits of two bundles together pairwise.","","","","","","","","","","","","","","","","","","","DSL for creating circuits compatible with fancy-garbling …","Provides objects and functions for statically garbling and …","","","","","","","","","","","","","","","Multiply <code>x</code> times the constant <code>c</code>.","","","Multiply each digit by a constant <code>c mod q</code>, returning a new …","Multiply each digit by a constant <code>c mod q</code>, returning a new …","Multiply each digit by a constant <code>c mod q</code>.","","","","","Multiply each digit by a constant <code>c mod q</code>, consuming it …","Multiply each digit by a constant <code>c mod q</code>, consuming it …","Get the color digit of the wire.","","","","","Return the product of all the wires’ moduli.","","Create a constant <code>x</code> with modulus <code>q</code>.","","","Creates a bundle of constant wires using moduli <code>ps</code>.","Creates a bundle of constant wires using moduli <code>ps</code>.","Add two CRT bundles.","Add two CRT bundles.","Exponentiate <code>x</code> by the constant <code>c</code>.","Exponentiate <code>x</code> by the constant <code>c</code>.","Multiplies each wire in <code>x</code> by the corresponding residue of <code>c</code>…","Multiplies each wire in <code>x</code> by the corresponding residue of <code>c</code>…","Creates a bundle of constant wires for the CRT …","Creates a bundle of constant wires for the CRT …","Generic, and expensive, CRT-based addition for two …","Generic, and expensive, CRT-based addition for two …","Encode a CRT input bundle.","Encode a CRT input bundle.","Encode many CRT input bundles.","Encode many CRT input bundles.","Encode a <code>CrtBundle</code>, producing zero wires as well as …","Helper function for advanced gadgets, returns the MSB of …","Helper function for advanced gadgets, returns the MSB of …","Returns 1 if <code>x &gt;= y</code>.","Returns 1 if <code>x &gt;= y</code>.","Returns 1 if <code>x &lt; y</code>.","Returns 1 if <code>x &lt; y</code>.","Compute the maximum bundle in <code>xs</code>.","Compute the maximum bundle in <code>xs</code>.","Multiply <code>x</code> with <code>y</code>.","Multiply <code>x</code> with <code>y</code>.","Output a CRT bundle and interpret it mod Q.","Output a CRT bundle and interpret it mod Q.","Output a slice of CRT bundles and interpret the outputs …","Output a slice of CRT bundles and interpret the outputs …","Receive an CRT input bundle.","Receive an CRT input bundle.","Receive many CRT input bundles.","Receive many CRT input bundles.","Compute <code>max(x,0)</code>.","Compute <code>max(x,0)</code>.","Compute the remainder with respect to modulus <code>p</code>.","Compute the remainder with respect to modulus <code>p</code>.","Reveal a CRT bundle to all parties.","Reveal a CRT bundle to all parties.","Reveal many CRT bundles to all parties.","Reveal many CRT bundles to all parties.","Return <code>if x &gt;= 0 then 1 else -1</code>, where <code>-1</code> is interpreted …","Return <code>if x &gt;= 0 then 1 else -1</code>, where <code>-1</code> is interpreted …","Return 0 if <code>x</code> is positive and 1 if <code>x</code> is negative.","Return 0 if <code>x</code> is positive and 1 if <code>x</code> is negative.","Subtract two CRT bundles.","Subtract two CRT bundles.","Convert the xs bundle to PMR representation. Useful for …","Convert the xs bundle to PMR representation. Useful for …","","","","Create a delta if it has not been created yet for this …","Fancy object to compute the multiplicative depth of a …","","","","Get the digits of the wire","","","","","Dummy implementation of <code>Fancy</code>.","Encode a single value.","Encode a single value.","Encode a bundle.","Encode a bundle.","Encode many input bundles.","Encode many input bundles.","Encode many values where the actual input is known.","Encode many wires, producing zero wires as well as encoded …","Encode a wire, producing the zero wire as well as the …","","","","","Compute <code>x == y</code>. Returns a wire encoding the result mod 2.","Compute <code>x == y</code>. Returns a wire encoding the result mod 2.","Errors that may be output by this library.","Extract the underlying bundle from this binary bundle.","Extract a wire from the Bundle, removing it and returning …","Extract the underlying bundle from this CRT bundle.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Pack the wire into a <code>Block</code>.","","","","","Get the deltas, consuming the Garbler.","Compute the hash of this wire.","Compute the hash of this wire.","Subroutine of hashback that converts the hash block into a …","","","","","Batch hashing of wires","Compute the hash of this wire, converting the result back …","Compute the hash of this wire, converting the result back …","","<code>Informer</code> runs a fancy computation and learns information …","Insert a wire from the Bundle","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether this bundle only contains residues in mod 2.","Access the underlying iterator","If b=0 then return 0, else return x.","If b=0 then return 0, else return x.","Subtract two wires, returning the result.","Subtract two wires, returning the result.","Subtract a wire from this one.","Subtract a wire from this one.","Subtract a wire from this one, consuming it for chained …","Subtract a wire from this one, consuming it for chained …","Mixed radix addition.","Mixed radix addition.","Mixed radix addition only returning the MSB.","Mixed radix addition only returning the MSB.","Change the modulus of <code>x</code> to <code>to_modulus</code> using a projection …","Change the modulus of <code>x</code> to <code>to_modulus</code> using a projection …","Return the moduli of all the wires in the bundle.","The modulus of the wire.","","","","","Multiply <code>x</code> and <code>y</code>.","","","Multiply each wire in <code>x</code> with each wire in <code>y</code>, pairwise.","Multiply each wire in <code>x</code> with each wire in <code>y</code>, pairwise.","If b=0 then return x, else return y.","If b=0 then return x, else return y.","If <code>b = 0</code> returns <code>x</code> else <code>y</code>.","If <code>b = 0</code> returns <code>x</code> else <code>y</code>.","If <code>x = 0</code> returns the constant <code>b1</code> else return <code>b2</code>. Folds …","If <code>x = 0</code> returns the constant <code>b1</code> else return <code>b2</code>. Folds …","Binary Not","Overriding <code>negate</code> to be a noop: entirely handled on garbler…","Negate is a noop for the evaluator","We can negate by having garbler xor wire with Delta","We can negate by having garbler xor wire with Delta","Negate all the digits <code>mod q</code>, returning a new wire.","Negate all the digits <code>mod q</code>, returning a new wire.","Negate all the digits mod q.","","","","","Negate all the digits <code>mod q</code>, consuming it for chained …","Negate all the digits <code>mod q</code>, consuming it for chained …","Create a new <code>Evaluator</code>.","Create a new garbler.","Create a new binary bundle from a vector of wires.","Create a new bundle from some wires.","Create a new CRT bundle from a vector of wires.","Uses Demorgan’s Rule implemented with an and gate and …","Uses Demorgan’s Rule implemented with an and gate and …","Returns 1 if any wire equals 1.","Returns 1 if any wire equals 1.","Process this wire as output. Some <code>Fancy</code> implementers don’…","","","Output the wires that make up a bundle.","Output the wires that make up a bundle.","Output a slice of bundles.","Output a slice of bundles.","Output a slice of wires.","Output a slice of wires.","Pad the Bundle with val, n times.","Add two wires digit-wise, returning a new wire.","Add two wires digit-wise, returning a new wire.","Add another wire digit-wise into this one. Assumes that …","","","","","Add another wire into this one, consuming it for chained …","Add another wire into this one, consuming it for chained …","Comparison based on PMR, more expensive than crt_lt but …","Comparison based on PMR, more expensive than crt_lt but …","Comparison based on PMR, more expensive than crt_lt but …","Comparison based on PMR, more expensive than crt_lt but …","Pop a wire from the Bundle.","Project <code>x</code> according to the truth table <code>tt</code>. Resulting wire …","","","push a wire onto the Bundle.","Get a random wire <code>mod q</code>.","","","","","Get a random wire label mod <code>q</code>, with the first digit set to …","","","","","Read a Wire from the reader.","Receive a single value.","Receive a single value.","Receive a bundle.","Receive a bundle.","Receive many values where the input is not known.","Receive many input bundles.","Receive many input bundles.","Reveal the contents of <code>x</code> to all parties.","","","Reveal a bundle to all parties.","Reveal a bundle to all parties.","Reveal a slice of items to all parties.","Reveal a slice of items to all parties.","Reveal many bundles to all parties.","Reveal many bundles to all parties.","Reverse the wires","Send a wire over the established channel.","Shift residues, replacing them with zeros in the modulus …","Shift residues, replacing them with zeros in the modulus …","Shift residues, replacing them with zeros in the modulus …","Shift residues, replacing them with zeros in the modulus …","Get the number of wires in this bundle.","Subtract <code>x</code> and <code>y</code>.","","","Subtract two wire bundles, residue by residue.","Subtract two wire bundles, residue by residue.","","","","","","","","","","","","","","","","","","","","","","","","","","Implementations of two-party secure computation.","","","","","","","","","","Tools useful for interacting with <code>fancy-garbling</code>.","","","","","","","","","","Extract the wires from this bundle.","Returns a new bundle only containing wires with matching …","Binary Xor","","","Xor is just addition","","XOR many wires together","XOR many wires together","The zero wire with modulus <code>q</code>","","","","Unpack the wire represented by a <code>Block</code> with modulus <code>q</code>. …","","","","Add gate","And gate","Static representation of arithmetic computation supported …","Arithmetic computation supported by fancy garbling.","Static representation of binary computation supported by …","Binary computation supported by fancy garbling.","CircuitBuilder is used to build circuits.","Trait to display circuit evaluation costs","The index and modulus of a gate in a circuit.","Trait representing circuits that can be built by …","Constant multiplication gate","Constant value","Constant value","A Circuit that can be evaluated by a given Fancy object","Input of evaluator","Input of evaluator","Input of garbler","Input of garbler","Gates that the circuit is composed of","Trait representing circuit gates that can be used in …","Not gate","Multiplication gate","Projection gate","Sub gate","Xor gate","","","","Get a BinaryBundle for the evaluator with n bits.","Get a BinaryBundle for the garbler with n bits.","","","","","","","","","","","","","","","","","","","","","","","","","Get a CrtBundle for the evaluator using composite modulus Q","Get a CrtBundle for the garbler using composite modulus Q","","","","","","Function to evaluate the circuit","","","Evaluate the circuit in plaintext.","Get CircuitRef for an evaluator input wire.","Return the modulus of the evaluator input indexed by <code>i</code>.","","","Get a vec of CircuitRefs for garbler inputs.","Finish circuit building, outputting the resulting circuit.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get CircuitRef for a garbler input wire.","Return the modulus of the garbler input indexed by <code>i</code>.","","","Get a vec of CircuitRefs for garbler inputs.","Get all evaluator input refs","","","Get all garbler input refs","","","Get number of nonfree gates","","","Get all output refs","","","Increase number of nonfree gates","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Generate constant gate","","","Generate evaluator input gate","","","Generate garbler input gate","","","","Return the modulus of the gate indexed by <code>i</code>.","","","","Make a new <code>Circuit</code> object.","Make a new <code>CircuitBuilder</code>.","","","Return the number of outputs.","Return the number of evaluator inputs.","Return the number of garbler inputs.","","Generates a new <code>Circuit</code> from file <code>filename</code>. The file must …","Print circuit info","","","","Add a constant ref","","","Add an evaluator input ref","","","Add a garbler input ref","","","Add a gate","","","Add wire moulus","","","Add an output ref","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constant to muiltiply by","Gate number","Gate number","Gate number","Gate number","Output wire index","Output wire index","Output wire index","Output wire index","Output wire index","Projection truth table","Value of constant","Reference to input 1","Reference to input 1","Reference to input 1","Reference to input 1","Reference to input 1","Reference to input 2","Reference to input 2","Reference to input 2","Gate number","Gate number","Gate number","Output wire index","Output wire index","Output wire index","Value of constant","Reference to input 1","Reference to input 1","Reference to input","Reference to input 2","Reference to input 2","Encode inputs statically.","Static evaluator for a circuit, created by the <code>garble</code> …","Implementation of the <code>Read</code> trait for use by the <code>Evaluator</code>.","Implementation of the <code>Write</code> trait for use by <code>Garbler</code>.","","","","","","","","","Encode a single evaluator input into its associated …","Encode a slice of evaluator inputs into their associated …","Encode a single garbler input into its associated …","Encode a slice of garbler inputs into their associated …","Evaluate the garbled circuit.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Garble a circuit without streaming.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new object from a vector of garbled gates and …","Make a new <code>Encoder</code> from lists of garbler and evaluator …","Make a new <code>GarbledWriter</code>.","Output the number of evaluator inputs.","Output the number of garbler inputs.","","The number of garbled rows and constant wires in the …","","","","","","","","","","","","","","","","","","Errors thrown by the Fancy computation.","Fancy Object which computes information about the circuit …","Carries the depth of the computation.","Projection is unsupported by the depth informer","Error from Fancy library.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new DepthInformer","","","","","","","","","","","","","","","","","","","","","","","","Simple struct that performs the fancy computation over <code>u16</code>.","Wrapper around <code>u16</code>.","","","","","","","","","","","Encode a single dummy value.","Encode a slice of inputs and a slice of moduli as …","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new Dummy.","Create a new DummyVal.","","","","","","","","","","","","","Extract the value.","","","","Expected binary argument.","Asymmetric moduli error.","Errors emitted when building a circuit.","Errors emitted by the circuit parser.","A communication error has occurred.","An error occurred while processing a message.","Decoding failed.","Delta required for wire reuse.","Errors from the dummy fancy object.","Encoding error.","Encoding error.","Errors from the evaluator.","The evaluator produced an error.","Errors that may occur when using the <code>Fancy</code> trait. These …","A fancy error has occurred.","A fancy error has occurred.","A fancy error has occurred.","A fancy error has occurred.","Processing the garbled circuit produced an error.","Errors from the garbler.","The garbler produced an error.","Invalid argument.","Invalid argument modulus.","Invalid number of arguments.","Projection truth table is invalid.","An I/O error occurred.","An I/O error has occurred.","Truth table expected but none given.","Not enough evaluator inputs provided.","Not enough evaluator inputs provided.","Not enough garbler inputs provided.","Not enough garbler inputs provided.","An oblivious transfer error has occurred.","An error occurred parsing a gate type.","An error occurred parsing an integer.","An error occurred parsing a line.","A regular expression parsing error occurred.","Reuse not supported.","A truth table was missing.","Errors produced by <code>twopac</code>.","Unequal moduli.","Uninitialized value encountered.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Received number of arguments.","Received modulus.","Expected number of arguments.","Expected modulus.","","","","","","","","","Implements <code>Fancy</code>. Used to learn information about a <code>Fancy</code> …","The statistics revealed by the informer.","","","","","","","","","","","","Moduli of evaluator inputs in the fancy computation.","Print information about the fancy computation.","","Returns the argument unchanged.","Returns the argument unchanged.","Moduli of garbler inputs in the fancy computation.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Make a new <code>Informer</code>.","Number of additions in the fancy computation.","Number of ciphertexts in the fancy computation.","Number of scalar multiplications in the fancy computation.","Number of constants in the fancy computation.","Number of evaluator inputs in the fancy computation.","Number of garbler inputs in the fancy computation.","Number of multiplications in the fancy computation.","Number of output ciphertexts.","Number of outputs in the fancy computation.","Number of projections in the fancy computation.","Number of subtractions in the fancy computation.","","","","","Get the statistics collected by the <code>Informer</code>","","","","","","","","","","The underlying fancy object.","","","","Implementation of semi-honest two-party computation.","Semi-honest evaluator.","Semi-honest garbler.","","","","","","","","","","","","","","","","","","Perform OT and obtain wires for the evaluator’s inputs.","","Returns the argument unchanged.","Returns the argument unchanged.","Get a reference to the internal channel.","Get a reference to the internal channel.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Make a new <code>Evaluator</code>.","Make a new <code>Garbler</code>.","","","","","Receive a garbler input wire.","Receive garbler input wires.","","","","","","","","","","","","","","","","","","Number of primes supported by our library.","Primes used in fancy garbling.","Extra Rng functionality, useful for <code>fancy-garbling</code>.","Convert <code>x</code> into base <code>q</code>.","Convert <code>x</code> into mixed radix form using the provided <code>radii</code>.","Generate a CRT modulus that support at least n-bit …","Generate the factors of a CRT modulus that support at …","Add a base <code>q</code> slice <code>ys</code> into <code>xs</code>.","Compute the CRT representation of x with respect to the …","Compute the CRT representation of <code>x</code> with respect to the …","Compute the value x given a list of CRT primes and …","Compute the value <code>x</code> given a composite CRT modulus provided …","Determine how many <code>mod q</code> digits fit into a <code>u128</code> (includes …","Factor using the primes in the global <code>PRIMES</code> array. Fancy …","Convert little-endian base <code>q</code> digits into <code>u128</code>.","Convert little-endian mixed radix digits into u128.","Randomly generate a <code>Block</code>.","Randomly generate a <code>bool</code>.","Randomly generate a (supported) modulus.","Randomly generate a prime (among the set of supported …","Randomly generate a <code>u128</code>.","Randomly generate a <code>u16</code>.","Randomly generate a <code>u32</code>.","Randomly generate a <code>u64</code>.","Randomly generate a valid <code>Block</code>.","Randomly generate a valid composite modulus.","Randomly generate a vector of valid factor","Randomly generate a <code>usize</code>.","Generate deltas ahead of time for the Garbler.","Invert inp_a mod inp_b.","Raise a u16 to a power mod some value. Returns <code>true</code> if <code>x</code> …","Primes skipping the modulus 2, which allows certain …","Generate a CRT modulus that support at least n-bit …","Compute the output tweak for a garbled gate where i is the …","Generate the factors of a CRT modulus that support at …","Generate a CRT modulus that support at least n-bit …","Tweak function for a single item.","Tweak function for two items.","Convert into a u128 from the “bits” as u16. Assumes …","Get the bits of a u128 encoded in 128 u16s, which is …"],"i":[0,0,0,0,0,0,0,0,0,0,73,72,0,0,0,0,0,0,0,0,0,73,72,13,13,13,0,0,0,0,68,5,9,85,85,68,68,70,70,70,5,5,9,9,70,70,3,13,14,16,17,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,73,73,73,73,9,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,73,73,73,73,74,74,74,74,86,86,86,86,86,86,86,86,86,86,86,86,5,9,18,11,23,13,14,16,17,5,9,18,11,23,13,14,16,17,0,0,18,11,23,13,14,16,17,18,11,23,13,14,16,17,68,5,9,3,3,3,13,14,16,17,3,3,3,13,14,16,17,23,14,72,5,9,87,87,88,88,88,88,88,88,88,88,88,88,73,73,73,73,9,88,88,88,88,88,88,88,88,88,88,88,88,88,88,73,73,73,73,88,88,88,88,74,74,74,74,88,88,88,88,88,88,88,88,14,16,17,9,0,18,23,18,3,13,14,16,17,0,73,73,73,73,73,73,73,9,9,13,14,16,17,85,85,0,18,11,23,13,14,16,17,5,9,18,18,11,23,23,13,14,16,17,3,13,14,16,17,9,3,3,3,13,14,16,17,0,3,3,11,0,11,5,9,18,11,23,13,14,16,17,11,11,85,85,3,3,3,3,3,3,85,85,85,85,68,68,11,25,13,14,16,17,68,5,9,85,85,89,89,70,70,70,70,70,5,5,9,9,3,3,3,13,14,16,17,3,3,5,9,18,11,23,70,70,70,70,72,5,9,87,87,87,87,72,72,11,3,3,3,13,14,16,17,3,3,88,88,88,88,11,68,5,9,11,3,13,14,16,17,3,13,14,16,17,5,73,73,73,73,73,73,73,74,5,9,74,74,74,74,74,74,11,9,87,87,87,87,11,68,5,9,85,85,18,11,23,13,14,16,17,5,9,18,11,23,13,14,16,17,5,9,18,11,23,13,14,16,17,0,5,9,18,11,23,13,14,16,17,0,5,9,18,11,23,13,14,16,17,11,11,70,5,5,9,9,70,70,3,13,14,16,17,90,91,92,39,40,0,0,0,0,0,0,0,0,39,39,40,0,39,40,39,40,38,0,40,39,39,39,40,35,35,35,35,35,35,36,34,37,39,40,35,36,34,37,39,40,36,34,37,39,40,36,34,37,39,40,35,35,35,35,36,34,37,39,40,49,34,37,0,35,38,34,37,35,35,36,36,34,37,39,39,40,40,35,36,34,37,39,40,35,38,34,37,35,38,34,37,38,34,37,38,34,37,38,34,37,38,34,37,35,36,34,37,39,40,93,39,40,93,39,40,93,39,40,36,34,35,35,35,38,35,34,37,38,38,38,35,37,94,34,37,35,38,34,37,38,34,37,38,34,37,38,34,37,38,34,37,38,34,37,35,36,34,37,39,40,36,39,40,35,36,34,37,39,40,35,36,34,37,39,40,35,36,34,37,39,40,35,36,34,37,39,40,35,35,95,96,97,98,99,100,101,95,98,99,99,102,100,101,95,98,99,100,101,98,103,104,105,106,105,107,108,106,105,107,106,105,0,0,0,0,50,45,46,47,50,45,46,47,45,45,45,45,50,47,50,45,46,47,50,45,46,47,0,50,45,46,47,50,45,47,45,45,46,50,50,45,46,47,50,45,46,47,50,45,46,47,50,45,46,47,47,0,0,0,55,55,53,53,54,55,53,54,55,53,54,53,54,53,53,53,53,54,55,55,53,53,54,55,55,53,54,55,53,54,53,53,53,53,53,53,53,53,54,53,55,53,54,55,53,54,55,53,54,55,53,54,55,53,53,109,0,0,57,57,57,58,57,58,58,58,57,57,57,57,58,57,58,57,58,58,57,57,57,58,57,57,57,57,57,58,57,58,57,58,57,58,58,57,58,57,56,10,0,0,6,10,6,10,0,41,10,0,60,0,41,6,10,59,60,0,60,56,56,56,56,43,60,56,41,6,41,6,60,43,43,43,43,59,10,0,56,56,56,41,6,10,59,43,60,56,41,6,10,59,43,60,56,56,41,41,6,6,10,10,59,59,43,43,60,60,56,41,41,6,6,6,6,6,10,10,10,10,10,59,59,43,43,43,43,60,60,60,60,60,60,56,41,6,10,59,43,60,60,56,41,6,10,59,43,60,56,41,6,10,59,43,60,56,41,6,10,59,43,60,56,41,6,10,59,43,60,56,41,6,10,59,43,60,110,111,112,113,114,115,116,117,118,119,120,119,120,121,122,123,124,125,126,127,128,0,0,69,69,69,71,69,71,71,71,69,69,69,71,71,71,69,71,71,69,71,69,69,69,71,71,71,71,71,71,71,71,71,71,71,69,69,69,69,69,69,71,71,69,71,69,71,69,71,69,69,71,69,0,0,0,75,77,75,75,77,77,75,77,75,77,75,77,75,77,77,77,77,75,77,75,77,75,77,75,77,75,77,75,75,77,77,75,77,75,77,75,77,75,75,77,75,77,75,77,75,77,75,77,75,77,75,77,75,75,77,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,129,129,129,129,129,129,129,129,129,129,129,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[[5,[2,[0,[3,4]]]]],[[1,[[0,[3,4]],6]]]],[[[9,[2,[0,[7,8]],[0,[3,4]]]]],[[1,[[0,[3,4]],10]]]],[[11,11],[[1,[11]]]],[[11,11],[[1,[11]]]],[[],1],[[],1],[12,1],[12,1],[[],1],[[[5,[2,13]]],1],[[[5,[2,14]]],1],[[[9,[2,[0,[7,8]],14]]],1],[[[9,[2,[0,[7,8]],13]]],1],[[],1],[[],1],[[],15],[13,15],[14,15],[16,15],[17,15],[18,[[1,[18]]]],[18,[[1,[18]]]],[[18,18],1],[[18,18],1],[[18,18],[[1,[18]]]],[[18,18],[[1,[18]]]],[[18,18],[[1,[18]]]],[[18,18],[[1,[18]]]],[[18,19,20],[[1,[18]]]],[[18,19,20],[[1,[18]]]],[[19,20],[[1,[18]]]],[[19,20],[[1,[18]]]],[18,[[1,[21]]]],[18,[[1,[21]]]],[[18,18],[[1,[18]]]],[[18,18],[[1,[18]]]],[[19,20],[[1,[18]]]],[[19,20],[[1,[18]]]],[20,[[1,[[21,[18]]]]]],[20,[[1,[[21,[18]]]]]],[[[9,[2,[0,[8,7]],3]],19,20],[[1,[10]]]],[[18,18],1],[[18,18],1],[[18,18],1],[[18,18],1],[[18,18],1],[[18,18],1],[[18,18],1],[[18,18],1],[[],[[1,[18]]]],[[],[[1,[18]]]],[[18,18],[[1,[18]]]],[[18,18],[[1,[18]]]],[[18,18],[[1,[18]]]],[[18,18],[[1,[18]]]],[[19,19,20],[[1,[18]]]],[[19,19,20],[[1,[18]]]],[[18,18],[[1,[18]]]],[[18,18],[[1,[18]]]],[[18,18],[[1,[18]]]],[[18,18],[[1,[18]]]],[18,[[1,[[12,[19]]]]]],[18,[[1,[[12,[19]]]]]],[[],[[1,[[12,[[21,[19]]]]]]]],[[],[[1,[[12,[[21,[19]]]]]]]],[20,[[1,[18]]]],[20,[[1,[18]]]],[[20,20],[[1,[[21,[18]]]]]],[[20,20],[[1,[[21,[18]]]]]],[18,[[1,[19]]]],[18,[[1,[19]]]],[[],[[1,[[21,[19]]]]]],[[],[[1,[[21,[19]]]]]],[[18,20],[[1,[18]]]],[[18,20],[[1,[18]]]],[[18,20],[[1,[18]]]],[[18,20],[[1,[18]]]],[[18,20],[[1,[18]]]],[[18,20],[[1,[18]]]],[[18,18],1],[[18,18],1],[18,[[1,[18]]]],[18,[[1,[18]]]],[[18,18],[[1,[18]]]],[[18,18],[[1,[18]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[18,[22]]],[[18,[22]]]],[[[11,[22]]],[[11,[22]]]],[[[23,[22]]],[[23,[22]]]],[13,13],[14,14],[16,16],[17,17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,1],[[[5,[2,[0,[3,4]]]],24],[[1,[[0,[3,4]],6]]]],[[[9,[2,[0,[7,8]],[0,[3,4]]]],24],[[1,[[0,[3,4]],10]]]],[24],[24],[24],[[13,24],13],[[14,24],14],[[16,24],16],[[17,24],17],[24],[24],[[],24],[13,24],[14,24],[16,24],[17,24],[[[23,[[0,[22,25]]]]],19],[[14,14,26],14],[[24,24],1],[[[5,[2,3]],24,24],[[1,[3,6]]]],[[[9,[2,[0,[7,8]],3]],24,24],[[1,[3,10]]]],[[],[[1,[11]]]],[[],[[1,[11]]]],[[23,23],[[1,[23]]]],[[23,23],[[1,[23]]]],[[23,24],[[1,[23]]]],[[23,24],[[1,[23]]]],[[23,19],[[1,[23]]]],[[23,19],[[1,[23]]]],[[19,19],[[1,[23]]]],[[19,19],[[1,[23]]]],[[23,23],[[1,[23]]]],[[23,23],[[1,[23]]]],[[19,19],[[1,[23]]]],[[19,19],[[1,[23]]]],[19,[[1,[[21,[23]]]]]],[19,[[1,[[21,[23]]]]]],[[[9,[2,[0,[8,7]],3]],19,19],[[1,[10]]]],[23,1],[23,1],[[23,23,27],1],[[23,23,27],1],[[23,23,27],1],[[23,23,27],1],[27,[[1,[23]]]],[27,[[1,[23]]]],[[23,23],[[1,[23]]]],[[23,23],[[1,[23]]]],[23,[[1,[[12,[19]]]]]],[23,[[1,[[12,[19]]]]]],[[],[[1,[[12,[[21,[19]]]]]]]],[[],[[1,[[12,[[21,[19]]]]]]]],[19,[[1,[23]]]],[19,[[1,[23]]]],[[20,19],[[1,[[21,[23]]]]]],[[20,19],[[1,[[21,[23]]]]]],[[23,27,12],[[1,[23]]]],[[23,27,12],[[1,[23]]]],[[23,24],[[1,[23]]]],[[23,24],[[1,[23]]]],[23,[[1,[19]]]],[23,[[1,[19]]]],[[],[[1,[[21,[19]]]]]],[[],[[1,[[21,[19]]]]]],[[23,27,12],[[1,[23]]]],[[23,27,12],[[1,[23]]]],[[23,27],1],[[23,27],1],[[23,23],[[1,[23]]]],[[23,23],[[1,[23]]]],[23,[[1,[11]]]],[23,[[1,[11]]]],[[],14],[[],16],[[],17],[[[9,[2,[0,[8,7]],3]],24],3],0,[[[18,[[0,[22,25]]]]],11],[[[23,[[0,[22,25]]]]],11],[[[18,[[0,[22,25]]]]],11],[[],[[21,[24]]]],[13,[[21,[24]]]],[14,[[21,[24]]]],[16,[[21,[24]]]],[17,[[21,[24]]]],0,[[24,24],1],[[24,24],1],[[],[[1,[11]]]],[[],[[1,[11]]]],[[],[[1,[[21,[11]]]]]],[[],[[1,[[21,[11]]]]]],[[],[[1,[21]]]],[[[9,[2,[0,[8,7]],3]]],[[1,[10]]]],[[[9,[2,[0,[8,7]],3]],24,24]],[[13,13],28],[[14,14],28],[[16,16],28],[[17,17],28],[[11,11],1],[[11,11],1],0,[[[18,[[0,[22,25]]]]],[[11,[[0,[22,25]]]]]],[[[11,[[0,[22,25]]]],20],[[0,[22,25]]]],[[[23,[[0,[22,25]]]]],[[11,[[0,[22,25]]]]]],[[13,29],30],[[14,29],30],[[16,29],30],[[17,29],30],[[]],[[]],[[]],[[[11,[[0,[22,25]]]]],[[18,[[0,[22,25]]]]]],[[]],[[]],[[[11,[[0,[22,25]]]]],[[23,[[0,[22,25]]]]]],[[]],[[]],[[]],[[]],[[15,24]],[[15,24],13],[[15,24],14],[[15,24],16],[[15,24],17],[[[9,[2,[0,[8,7]],3]]],[[31,[24,3]]]],[15,15],[15,15],[[15,24]],[[15,24],13],[[15,24],14],[[15,24],16],[[15,24],17],[15],[[15,24]],[[15,24]],[[[11,[[0,[22,25]]]],20]],0,[[[11,[[0,[22,25]]]],20,[0,[22,25]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[11,[[0,[22,25]]]]],28],[[[11,[[0,[22,25]]]]],[[32,[[0,[22,25]]]]]],[11,[[1,[11]]]],[11,[[1,[11]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[1,[11]]]],[[],[[1,[11]]]],[[],1],[[],1],[24,1],[24,1],[[[11,[[0,[22,25]]]]],[[21,[24]]]],[[],24],[13,24],[14,24],[16,24],[17,24],[[],1],[[[5,[2,[0,[3,4]]]]],[[1,[[0,[3,4]],6]]]],[[[9,[2,[0,[7,8]],[0,[3,4]]]]],[[1,[[0,[3,4]],10]]]],[[11,11],[[1,[11]]]],[[11,11],[[1,[11]]]],[[11,11],[[1,[11]]]],[[11,11],[[1,[11]]]],[[],1],[[],1],[[28,28],1],[[28,28],1],[[],1],[[[5,[2,13]]],1],[[[5,[2,14]]],1],[[[9,[2,[0,[7,8]],13]]],1],[[[9,[2,[0,[7,8]],14]]],1],[[]],[[]],[[]],[13,13],[14,14],[16,16],[17,17],[[]],[[]],[2,[[5,[2,3]]]],[[2,[0,[8,7]]],[[9,[2,[0,[8,7]],3]]]],[[[21,[[0,[22,25]]]]],[[18,[[0,[22,25]]]]]],[[[21,[[0,[22,25]]]]],[[11,[[0,[22,25]]]]]],[[[21,[[0,[22,25]]]]],[[23,[[0,[22,25]]]]]],[[],1],[[],1],[[],1],[[],1],[[],[[1,[[12,[24]]]]]],[[[5,[2,3]]],[[1,[[12,[24]],6]]]],[[[9,[2,[0,[7,8]],3]]],[[1,[[12,[24]],10]]]],[11,[[1,[[12,[[21,[24]]]]]]]],[11,[[1,[[12,[[21,[24]]]]]]]],[[],[[1,[[12,[[21,[[21,[24]]]]]]]]]],[[],[[1,[[12,[[21,[[21,[24]]]]]]]]]],[[],[[1,[[12,[[21,[24]]]]]]]],[[],[[1,[[12,[[21,[24]]]]]]]],[[[11,[[0,[22,25]]]],20]],[[]],[[]],[[]],[[13,13],13],[[14,14],14],[[16,16],16],[[17,17],17],[[]],[[]],[[23,23],1],[[23,23],1],[[23,23],1],[[23,23],1],[[[11,[[0,[22,25]]]]],[[12,[[0,[22,25]]]]]],[[24,[12,[[21,[24]]]]],1],[[[5,[2,[0,[3,4]]]],24,[12,[[21,[24]]]]],[[1,[[0,[3,4]],6]]]],[[[9,[2,[0,[7,8]],[0,[3,4]]]],24,[12,[[21,[24]]]]],[[1,[[0,[3,4]],10]]]],[[[11,[[0,[22,25]]]],[0,[22,25]]]],[24],[24,13],[24,14],[24,16],[24,17],[24],[24,13],[24,14],[24,16],[24,17],[[[5,[2,3]],24],[[1,[3,6]]]],[24,1],[24,1],[[],[[1,[11]]]],[[],[[1,[11]]]],[[],[[1,[21]]]],[[],[[1,[[21,[11]]]]]],[[],[[1,[[21,[11]]]]]],[[],[[1,[24]]]],[[[5,[2,3]]],[[1,[24,6]]]],[[[9,[2,[0,[7,8]],3]]],[[1,[24,10]]]],[11,[[1,[[21,[24]]]]]],[11,[[1,[[21,[24]]]]]],[[],[[1,[[21,[24]]]]]],[[],[[1,[[21,[24]]]]]],[[],[[1,[[21,[[21,[24]]]]]]]],[[],[[1,[[21,[[21,[24]]]]]]]],[[[11,[[0,[22,25]]]]]],[[[9,[2,[0,[8,7]],3]]],[[1,[10]]]],[[11,20],[[1,[11]]]],[[11,20],[[1,[11]]]],[[11,20],[[1,[11]]]],[[11,20],[[1,[11]]]],[[[11,[[0,[22,25]]]]],20],[[],1],[[[5,[2,[0,[3,4]]]]],[[1,[[0,[3,4]],6]]]],[[[9,[2,[0,[7,8]],[0,[3,4]]]]],[[1,[[0,[3,4]],10]]]],[[11,11],[[1,[11]]]],[[11,11],[[1,[11]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],0,[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[11,[[0,[22,25]]]]]],[[[11,[[0,[22,25]]]]],[[11,[[0,[22,25]]]]]],[[],1],[[[5,[2,13]]],1],[[[5,[2,14]]],1],[[[9,[2,[0,[7,8]],13]]],1],[[[9,[2,[0,[7,8]],14]]],1],[[],1],[[],1],[24],[24,13],[24,14],[24,16],[24,17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[35,[34]],36,36],[[1,[36]]]],[[[35,[34]]],1],[[[35,[37]]],1],[[[35,[38]],20],[[18,[36]]]],[[[35,[38]],20],[[18,[36]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[36,36],[34,34],[37,37],[39,39],[40,40],[[]],[[]],[[]],[[]],[[]],[[[35,[34]],36,24],[[1,[36]]]],[[[35,[38]],24,24],[[1,[36]]]],[[[35,[38]],19],[[23,[36]]]],[[[35,[38]],19],[[23,[36]]]],[[36,36],28],[[34,34],28],[[37,37],28],[[39,39],28],[[40,40],28],[[],[[1,[[12,[[21,[24]]]]]]]],[34,[[1,[[12,[[21,[24]]]]]]]],[37,[[1,[[12,[[21,[24]]]]]]]],[[],[[1,[[21,[24]],41]]]],[[[35,[38]],24],36],[20,24],[[34,20],24],[[37,20],24],[[[35,[38]]],[[21,[36]]]],[[[35,[38]]],38],[[36,29],30],[[36,29],30],[[34,29],30],[[37,29],30],[[39,29],30],[[39,29],30],[[40,29],30],[[40,29],30],[[]],[[]],[[]],[[]],[[]],[[]],[[[35,[38]],24],36],[20,24],[[34,20],24],[[37,20],24],[[[35,[38]]],[[21,[36]]]],[[]],[34],[37],[[]],[34],[37],[[],20],[34,20],[37,20],[[]],[34],[37],[[]],[34],[37],[[]],[[]],[[]],[[]],[[]],[[]],[24],[24,39],[24,40],[20],[20,39],[20,40],[20],[20,39],[20,40],[36,24],[[34,20],24],[[[35,[34]],36,36],[[1,[36]]]],[[[35,[37]]],1],[[[35,[34]]],1],[[[12,[20]]]],[[],[[35,[38]]]],[[[12,[20]]],34],[[[12,[20]]],37],[[],20],[[],20],[[],20],[[[35,[38]],36],[[1,[[12,[24]]]]]],[42,[[1,[37,43]]]],[[],[[1,[41]]]],[[],[[1,[41]]]],[[],[[1,[41]]]],[[[35,[34]],36,24,[12,[[21,[24]]]]],[[1,[36]]]],[36],[[34,36]],[[37,36]],[36],[[34,36]],[[37,36]],[36],[[34,36]],[[37,36]],[[]],[34],[37],[24],[[34,24]],[[37,24]],[36],[[34,36]],[[37,36]],[[[35,[34]],36,36],[[1,[36]]]],[[]],[[]],[[]],[[]],[[]],[[],44],[[],44],[[],44],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[]],[[]],[[]],[[]],[[]],[[]],[[[35,[34]]],1],[[[35,[37]]],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[45,[3]],24,20],3],[[[45,[3]]],[[21,[3]]]],[[[45,[3]],24,20],3],[[[45,[3]]],[[21,[3]]]],[[[50,[3,[49,[[5,[[48,[46,47]],3]]]]]]],[[1,[[21,[24]],6]]]],[47,51],[[[50,[52,52]],29],30],[[[45,[52]],29],30],[[46,29],30],[[47,29],30],[[]],[[]],[[]],[[]],[[],[[1,[10]]]],[[]],[[]],[[]],[[]],[[[21,[15]]],50],[[[21,[3]],[21,[3]],[31,[24,3]]],[[45,[3]]]],[[[12,[20]]],47],[[[45,[3]]],20],[[[45,[3]]],20],[46,[[51,[20]]]],[50,20],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],33],[[],33],[[],33],[[],33],[[]],[[]],[[]],[[]],[47,[[51,[20]]]],0,0,0,0,0,[53,1],[53,1],[[]],[[]],[[]],[[]],[[]],[[]],[54,54],[53,53],[[]],[[]],[[53,24],1],[[53,24,24],1],[53,[[1,[21]]]],[[54,29],30],[[55,29],30],[[55,29],30],[[53,29],30],[[53,29],30],[[]],[56,55],[[]],[[]],[[]],[[]],[[]],[54,24],[53,1],[53,1],[[],53],[53,[[1,[[12,[24]]]]]],[[53,24,[12,[[21,[24]]]]],1],[53,[[1,[21]]]],[53,[[1,[24]]]],[53,1],[[]],[[]],[[],44],[[],44],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],33],[[],33],[[],33],[[]],[[]],[[]],[53,1],0,0,0,[[57,58,58],[[1,[58]]]],[57,1],[[]],[[]],[[]],[[]],[58,58],[[]],[[57,58,24],[[1,[58]]]],[[57,24,24],[[1,[58]]]],[[57,24,24],[[1,[58,41]]]],[57,[[1,[[21,[58]],41]]]],[[58,29],30],[[]],[[]],[[]],[[]],[58,24],[[57,58,58],[[1,[58]]]],[57,1],[[],57],[[24,24],58],[[57,58],[[1,[[12,[24]]]]]],[[57,58,24,[12,[[21,[24]]]]],[[1,[58]]]],[57,[[1,[[21,[58]],41]]]],[[57,58],[[1,[24,41]]]],[[57,58,58],[[1,[58]]]],[[]],[[],1],[[],1],[[],1],[[],1],[[],33],[[],33],[58,24],[[]],[[]],[57,1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[56,29],30],[[56,29],30],[[41,29],30],[[41,29],30],[[6,29],30],[[6,29],30],[[10,29],30],[[10,29],30],[[59,29],30],[[59,29],30],[[43,29],30],[[43,29],30],[[60,29],30],[[60,29],30],[[]],[56,41],[[]],[[]],[56,6],[61,6],[62,6],[60,6],[[]],[60,10],[[[63,[[21,[15]]]]],10],[62,10],[56,10],[[]],[56,59],[62,43],[[]],[64,43],[65,43],[62,60],[[]],[56,60],[66,60],[10,60],[6,60],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[67],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[69,[68]]],1],[[[69,[70]]],1],[[]],[[]],[[]],[[]],[71,71],[[]],[[[69,[68]],24],1],[[[69,[72]],24,24],1],[[[69,[[0,[72,73]]]]],[[1,[21]]]],[71,[[21,[24]]]],[[71,29],30],[[71,29],30],[[]],[[]],[71,[[21,[24]]]],[[]],[[]],[[[69,[68]]],1],[[[69,[70]]],1],[72,[[69,[72]]]],[71,20],[71,20],[71,20],[71,20],[71,20],[71,20],[71,20],[71,20],[71,20],[71,20],[71,20],[[[69,[72]]],[[1,[[12,[24]]]]]],[[[69,[68]],24,[12,[[21,[24]]]]],1],[[[69,[[0,[72,73]]]]],[[1,[21]]]],[[[69,[[0,[72,74]]]]],[[1,[24]]]],[[[69,[72]]],71],[[[69,[68]]],1],[[]],[[],44],[[],1],[[],1],[[],1],[[],1],[[],33],[[],33],0,[[]],[[]],[[[69,[70]]],1],0,0,0,[[[75,[2,[0,[3,4]]]]],1],[[[77,[2,[0,[8,76]],[0,[3,4]]]]],1],[[[75,[2,14]]],1],[[[75,[2,13]]],1],[[[77,[2,[0,[8,76]],13]]],1],[[[77,[2,[0,[8,76]],14]]],1],[[]],[[]],[[]],[[]],[[[75,[2,[0,[3,4]]]],24],1],[[[77,[2,[0,[8,76]],[0,[3,4]]]],24],1],[[[75,[2,3]],24,24],1],[[[77,[2,[0,[8,76]],3]],24,24],1],[77],[77,9],[[[77,[2,[0,[8,76,78]],[0,[79,80]],3]],24,24],[[1,[3,60]]]],[[[75,[2,[0,[8,76]],[0,[81,80]],3]]],[[1,[[21,[3]],60]]]],[[[77,[2,[0,[8,76,78]],[0,[79,80]],3]]],[[1,[[21,[3]],60]]]],[[]],[[]],[[[75,[2,[0,[8,76]],[0,[81,80]],3]]]],[[[77,[2,[0,[8,76,78]],[0,[79,80]],3]]]],[[]],[[]],[[[75,[2,[0,[3,4]]]]],1],[[[77,[2,[0,[8,76]],[0,[3,4]]]]],1],[[[75,[2,13]]],1],[[[75,[2,14]]],1],[[[77,[2,[0,[8,76]],13]]],1],[[[77,[2,[0,[8,76]],14]]],1],[[2,[0,[8,76]]],[[1,[[75,[2,[0,[8,76]],[0,[81,80]],3]],60]]]],[[2,[0,[8,76,78]]],[[1,[[77,[2,[0,[8,76,78]],[0,[79,80]],3]],60]]]],[[[75,[2,3]]],[[1,[[12,[24]]]]]],[[[77,[2,[0,[8,76]],3]]],[[1,[[12,[24]]]]]],[[[75,[2,[0,[3,4]]]],24,[12,[[21,[24]]]]],1],[[[77,[2,[0,[8,76]],[0,[3,4]]]],24,[12,[[21,[24]]]]],1],[[[75,[2,[0,[8,76]],[0,[81,80]],3]],24],[[1,[3,60]]]],[[[75,[2,[0,[8,76]],[0,[81,80]],3]]],[[1,[[21,[3]],60]]]],[[[77,[2,[0,[8,76,78]],[0,[79,80]],3]]],[[1,[[21,[3]],60]]]],[[[75,[2,[0,[8,76]],3]]],[[1,[24]]]],[[[77,[2,[0,[8,76]],3]]],[[1,[24]]]],[[[75,[2,[0,[3,4]]]]],1],[[[77,[2,[0,[8,76]],[0,[3,4]]]]],1],[[],1],[[],1],[[],1],[[],1],[[],33],[[],33],[[]],[[]],[[[75,[2,14]]],1],[[[75,[2,13]]],1],[[[77,[2,[0,[8,76]],14]]],1],[[[77,[2,[0,[8,76]],13]]],1],0,0,0,[[19,24],[[21,[24]]]],[19,[[21,[24]]]],[82,19],[82,[[21,[24]]]],[24],[19,[[21,[24]]]],[[19,19],[[21,[24]]]],[[],19],[19,19],[24,20],[19,[[21,[24]]]],[24,19],[[],19],[[],15],[[],28],[[],24],[[],24],[[],19],[[],24],[[],82],[[],83],[24,15],[[],19],[[],[[21,[24]]]],[[],20],[[],[[31,[24,3]]]],[[84,84],84],[24,28],[20,19],[82,19],[[20,24],15],[82,[[21,[24]]]],[[],19],[20,15],[[83,83],15],[[],19],[[19,20],[[21,[24]]]]],"p":[[4,"Result"],[8,"AbstractChannel"],[8,"WireLabel"],[8,"ArithmeticWire"],[3,"Evaluator"],[4,"EvaluatorError"],[8,"RngCore"],[8,"CryptoRng"],[3,"Garbler"],[4,"GarblerError"],[3,"Bundle"],[4,"Option"],[4,"AllWire"],[3,"WireMod2"],[3,"Block"],[3,"WireMod3"],[3,"WireModQ"],[3,"BinaryBundle"],[15,"u128"],[15,"usize"],[3,"Vec"],[8,"Clone"],[3,"CrtBundle"],[15,"u16"],[8,"HasModulus"],[3,"Choice"],[15,"str"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"HashMap"],[3,"Iter"],[3,"TypeId"],[3,"ArithmeticCircuit"],[3,"CircuitBuilder"],[3,"CircuitRef"],[3,"BinaryCircuit"],[8,"CircuitType"],[4,"ArithmeticGate"],[4,"BinaryGate"],[4,"DummyError"],[8,"BufRead"],[4,"CircuitParserError"],[3,"String"],[3,"Encoder"],[3,"GarbledReader"],[3,"GarbledWriter"],[3,"Channel"],[8,"EvaluableCircuit"],[3,"GarbledCircuit"],[6,"Result"],[8,"Debug"],[3,"DepthInformer"],[3,"DepthItem"],[4,"DepthError"],[4,"FancyError"],[3,"Dummy"],[3,"DummyVal"],[4,"CircuitBuilderError"],[4,"TwopacError"],[3,"RecvError"],[3,"Error"],[3,"SendError"],[4,"Error"],[3,"ParseIntError"],[4,"Error"],[3,"Demand"],[8,"FancyArithmetic"],[3,"Informer"],[8,"FancyBinary"],[3,"InformerStats"],[8,"Fancy"],[8,"FancyInput"],[8,"FancyReveal"],[3,"Evaluator"],[8,"Rng"],[3,"Garbler"],[8,"SeedableRng"],[8,"Sender"],[8,"SemiHonest"],[8,"Receiver"],[15,"u32"],[15,"u64"],[15,"i128"],[8,"ArithmeticBundleGadgets"],[8,"BinaryGadgets"],[8,"BundleGadgets"],[8,"CrtGadgets"],[8,"BinaryBundleGadgets"],[13,"Mod2"],[13,"Mod3"],[13,"ModN"],[8,"GateType"],[8,"CircuitInfo"],[13,"Cmul"],[13,"GarblerInput"],[13,"EvaluatorInput"],[13,"Mul"],[13,"Proj"],[13,"Add"],[13,"Sub"],[13,"Constant"],[13,"GarblerInput"],[13,"EvaluatorInput"],[13,"And"],[13,"Xor"],[13,"Inv"],[13,"Constant"],[13,"Underlying"],[13,"FancyError"],[13,"IoError"],[13,"RegexError"],[13,"ParseLineError"],[13,"ParseGateError"],[13,"FancyError"],[13,"CommunicationError"],[13,"FancyError"],[13,"InvalidArg"],[13,"InvalidArgNum"],[13,"InvalidArgMod"],[13,"CommunicationError"],[13,"AsymmetricHalfGateModuliMax8"],[13,"FancyError"],[13,"IoError"],[13,"OtError"],[13,"GarblerError"],[13,"EvaluatorError"],[13,"FancyError"],[8,"RngExt"]]},\
"fancy_garbling_base_conversion":{"doc":"","t":[5,5],"n":["lookup_defined_for_mod","lookup_digits_mod_at_position"],"q":["fancy_garbling_base_conversion",""],"d":["",""],"i":[0,0],"f":[[1,2],[[3,1,4]]],"p":[[15,"u16"],[15,"bool"],[15,"u8"],[15,"usize"]]},\
"humidor":{"doc":"Humidor is an implementation of the Ligero ZK protocol: …","t":[0,18,8,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ligero","FIELD_SIZE","FieldForLigero","Round0","Round1","Round2","Round3","Round4","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","expected_proof_size","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","init","init","init","init","init","interactive","into","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","noninteractive","size","size","size","size","size","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","Prover","Verifier","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","expected_proof_size","expected_proof_size","from","from","from_subset","from_subset","init","init","into","into","is_in_subset","is_in_subset","new","new","params","params","round0","round1","round2","round3","round4","shared","shared_mask","shared_mask","shared_mask_range","shared_range","shared_witness","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","verify","vzip","vzip","Proof","Prover","Verifier","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","expected_proof_size","expected_proof_size","from","from","from","from_subset","from_subset","from_subset","init","init","init","into","into","into","is_in_subset","is_in_subset","is_in_subset","make_proof","make_proof_and_shared_check","new","new","shared_mask","size","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","verify_with_shared","vzip","vzip","vzip"],"q":["humidor","humidor::ligero","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","humidor::ligero::interactive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","humidor::ligero::noninteractive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This module implements Ligero according to section 4.7 of …","Size of field, for use in parameter selection.","This is a marker trait consolidating the traits needed for …","Round 0: Prover -&gt; Verifier","Round 1: Verifier -&gt; Prover","Round 2: Prover -&gt; Verifier","Round 3: Verifier -&gt; Prover","Round 4: Prover -&gt; Verifier","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The theoretical proof size according to Section 5.3 of …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Interactive Ligero implementation.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Non-interactive Ligero implementation, created by applying …","Actual size of this round of communication.","Actual size of this round of communication.","Actual size of this round of communication.","Actual size of this round of communication.","Actual size of this round of communication.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Interactive Ligero prover.","Ligero interactive verifier.","","","","","","","","","","","Theoretical proof size, according to Section 5.3.","Theoretical proof size, according to Section 5.3.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create an interactive prover out of a circuit and witness.","Create a new verifier from a circuit.","Get the prover’s parameters.","Get the verifier’s parameters.","Generate round-0 prover message.","Generate round-1 verifier message.","Generate round-2 prover message.","Generate round-3 verifier message.","Generate round-4 prover message.","Get the range within the extended witness that contains …","Get mask for the shared-witness check, i.e., the <code>m</code> in the …","Get the range within the extended witness that contains …","Get the range within the extended witness that contains …","Get the range within the extended witness that contains …","Get mask for the shared-witness check, i.e., the <code>m</code> in the …","","","","","","","","","","","Run final verification procedure.","","","Complete proof message sent from prover to verifier.","Non-interactive Ligero prover.","Non-interactive Ligero verifier.","","","","","","","","","","","","","","","","Theoretical proof size from Section 5.3.","Theoretical proof size from Section 5.3.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Generate the proof message","Generate the proof message. Takes a commitment to the …","Create a non-interactive prover from a circuit and witness.","Create a verifier out of a circuit.","Get mask for the shared-witness check, i.e., the <code>m</code> in the …","Actual size of the non-interactive proof message.","","","","","","","","","","","","","","","","Run the final verification procedure.","Run the final verification procedure. Return the output of …","","",""],"i":[0,13,0,0,0,0,0,0,3,4,5,6,7,3,4,5,6,7,3,4,5,6,7,3,4,5,6,7,3,4,5,6,7,3,4,5,6,7,3,4,5,6,7,0,3,4,5,6,7,3,4,5,6,7,3,4,5,6,7,3,4,5,6,7,0,3,4,5,6,7,3,4,5,6,7,0,3,4,5,6,7,3,4,5,6,7,3,4,5,6,7,3,4,5,6,7,3,4,5,6,7,3,4,5,6,7,3,4,5,6,7,3,4,5,6,7,0,0,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,17,17,17,18,17,18,17,18,17,18,17,18,18,17,18,0,0,0,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,23,23,23,24,23,25,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,24,24,25,23,24],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[4,[1]]],[[4,[1]]]],[[[5,[1]]],[[5,[1]]]],[[[6,[1]]],[[6,[1]]]],[[[7,[1,[0,[1,2]]]]],[[7,[1,[0,[1,2]]]]]],[[]],[[]],[[]],[[]],[[]],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[[8,8,8,8,8,8,8,8],8],[[[3,[[0,[9,2]]]],10],11],[[[4,[9]],10],11],[[[5,[9]],10],11],[[[6,[9]],10],11],[[[7,[9,[0,[9,2]]]],10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],0,[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],0,[[[3,[2]]],8],[[[4,[13]]],8],[5,8],[[[6,[13]]],8],[[[7,[13,2]]],8],[[]],[[]],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[8],[8],[8],[8],[8],[8],[[[17,[13,2]]],8],[[[18,[13,2]]],8],[[]],[[]],[[]],[[]],[[],8],[[],8],[[]],[[]],[[],12],[[],12],[[19,20,[14,[[21,[8]]]]],[[17,[13,2]]]],[[19,[14,[[21,[8]]]]],[[18,[13,2]]]],[[[17,[13,2]]],[[0,[13]]]],[[[18,[13,2]]],[[0,[13]]]],[[[17,[13,2]]],[[3,[2]]]],[[[18,[13,2]],[3,[2]]],[[4,[13]]]],[[[17,[13,2]],[4,[13]]],[[5,[13]]]],[[[18,[13,2]],[5,[13]]],[[6,[13]]]],[[[17,[13,2]],[6,[13]]],[[7,[13,2]]]],[[[18,[13,2]]],[[21,[8]]]],[[[17,[13,2]]],[[22,[13]]]],[[[18,[13,2]]],[[21,[8]]]],[[[17,[13,2]]],[[21,[8]]]],[[[17,[13,2]]],[[21,[8]]]],[[[17,[13,2]]],[[22,[13]]]],[[],14],[[],14],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[[18,[13,2]],[7,[13,2]]],12],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[8],[8],[8],[8],[8],[8],[8],[8],[8],[[[23,[13,2]]],8],[[[24,[13,2]]],8],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[[23,[13,2]]],[[25,[13,2]]]],[[[23,[13,2]]]],[[19,20,[14,[[21,[8]]]]],[[23,[13,2]]]],[[19,[14,[[21,[8]]]]],[[24,[13,2]]]],[[[23,[13,2]]],[[22,[13]]]],[[[25,[13,2]]],8],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[[24,[13,2]],[25,[13,2]]],12],[[[24,[13,2]],[25,[13,2]]]],[[]],[[]],[[]]],"p":[[8,"Clone"],[8,"Digest"],[3,"Round0"],[3,"Round1"],[3,"Round2"],[3,"Round3"],[3,"Round4"],[15,"usize"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"bool"],[8,"FieldForLigero"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"Prover"],[3,"Verifier"],[3,"Circuit"],[3,"Vec"],[3,"Range"],[6,"Array1"],[3,"Prover"],[3,"Verifier"],[3,"Proof"]]},\
"inferno":{"doc":"<code>inferno</code> is an implementation of the non-interactive …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Proof","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","prove","serialize","try_from","try_into","type_id","verify","vzip"],"q":["inferno","","","","","","","","","","","","","","","",""],"d":["The inferno proof. <code>N</code> denotes the number of parties in each …","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Construct a proof for <code>circuit</code> with <code>witness</code>, using the …","","","","","Verify that the proof on <code>circuit</code> is valid, for the given …",""],"i":[0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,[[]],[[]],[1],[1],[[],[[4,[[3,[2]]]]]],[1],[[]],[[],1],[[]],[[5,1,1,6],[[3,[2]]]],[[[3,[2]]],4],[[],4],[[],4],[[],7],[[[3,[2]],5,1,1],8],[[]]],"p":[[15,"usize"],[8,"FiniteField"],[3,"Proof"],[4,"Result"],[3,"Circuit"],[3,"AesRng"],[3,"TypeId"],[6,"Result"]]},\
"keyed_arena":{"doc":"<code>KeyedArena</code> is a bump allocator which allows for random …","t":[3,3,3,3,3,3,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AllocationKey","BorrowedAllocation","KeyedArena","KeyedArenaFromPool","KeyedArenaPool","KeyedArenaStats","alloc_slice_fill_with","allocated_bytes","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","from","from","from","from","get","into","into","into","into","into","into","key","new","num_allocations","reset","stats","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity"],"q":["keyed_arena","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A key that can be used to retrieve a previous allocation …","A mutable allocation of a slice of type <code>T</code>, borrowed from a …","A bump allocating arena where allocations can be indexed …","A wrapper for a <code>KeyedArena</code> which will return it to a …","A thread-safe object pool to cache <code>KeyedArena</code> values.","","Allocate a slice, <code>&amp;[T]</code> of length <code>len</code>, generated by …","","","","","","","","","Retrieve a previous allocation from this arena.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a fresh <code>KeyedArena</code> from the pool.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get a key that can be used to retrieve this allocation in …","Construct a new <code>KeyedArenaPool</code>. Fresh arenas will be …","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,10,7,1,14,11,8,10,7,1,1,14,11,8,10,8,10,8,10,1,7,11,7,11,7,11,10,7,1,14,11,8,10,14,7,1,14,11,8,10,7,14,10,1,1,8,10,7,1,14,11,8,10,7,1,14,11,8,10,7,1,14,11,8,10,1],"f":[0,0,0,0,0,0,[[1,2,3],[[7,[[0,[4,5,6]]]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,[8,[[0,[4,5,6]]]]],[[7,[[0,[4,5,6]]]]]],[[]],[[]],[[]],[[]],[[]],[[[8,[[0,[9,4,5,6]]]]],[[8,[[0,[9,4,5,6]]]]]],[10,10],[[]],[[]],[[],1],[[[7,[[0,[4,5,6]]]]]],[11],[[[7,[[0,[4,5,6]]]]]],[11],[[[7,[[0,[4,5,6]]]]]],[11],[[10,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[14,11],[[]],[[]],[[]],[[]],[[]],[[]],[[[7,[[0,[4,5,6]]]]],[[8,[[0,[4,5,6]]]]]],[[2,2,2],14],0,[1],[1,10],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[2,2],1]],"p":[[3,"KeyedArena"],[15,"usize"],[8,"FnMut"],[8,"Copy"],[8,"Sized"],[8,"Send"],[3,"BorrowedAllocation"],[3,"AllocationKey"],[8,"Clone"],[3,"KeyedArenaStats"],[3,"KeyedArenaFromPool"],[3,"Formatter"],[6,"Result"],[3,"KeyedArenaPool"],[4,"Result"],[3,"TypeId"]]},\
"ocelot":{"doc":"<code>ocelot</code> provides oblivious transfer, oblivious PRFs and …","t":[13,13,13,4,13,13,13,13,11,11,0,11,11,11,11,11,11,0,0,11,0,11,11,11,11,11,12,12,12,12,12,12,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,6,6,6,6,8,16,8,16,8,10,10,10,0,0,10,10,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,8,8,6,6,8,6,6,6,6,16,16,6,6,8,8,8,8,0,0,0,10,10,10,0,0,0,10,10,10,10,10,10,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,8,8,10,10,10,10,10,10,10,0,17,17,17,17,17,17,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CoinTossError","CorrelationCheckFailed","EqCheckFailed","Error","InvalidInputLength","InvalidOpening","IoError","Other","borrow","borrow_mut","edabits","fmt","fmt","from","from","from","into","oprf","ot","provide","svole","to_string","try_from","try_into","type_id","vzip","0","0","0","0","0","1","EdabitsProver","EdabitsVerifier","FComProver","FComVerifier","MacProver","MacVerifier","ProverConv","VerifierConv","add","add","affine_add_cst","affine_add_cst","affine_mult_cst","affine_mult_cst","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_zero","check_zero","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","conditional_select","conditional_select","conv","conv","duplicate","duplicate","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","get_delta","init","init","init","init","input","input","input1","input1","input_low_level","input_low_level","into","into","into","into","into","into","into","into","neg","neg","open","open","quicksilver_check_multiply","quicksilver_check_multiply","random","random","random_edabits","random_edabits","random_triples","random_triples","sub","sub","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wolverine_check_multiply","wolverine_check_multiply","Input","KkrtReceiver","KkrtSender","KmprtReceiver","KmprtSender","ObliviousPrf","Output","Receiver","Seed","Sender","compute","init","init","kkrt","kmprt","receive","send","Receiver","Sender","borrow","borrow","borrow_mut","borrow_mut","compute","encode","from","from","init","init","into","into","receive","send","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Receiver","Sender","borrow","borrow","borrow_mut","borrow_mut","from","from","init","init","into","into","receive","send","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AlszReceiver","AlszSender","ChouOrlandiReceiver","ChouOrlandiSender","CorrelatedReceiver","CorrelatedSender","DummyReceiver","DummySender","FixedKeyInitializer","KosDeltaReceiver","KosDeltaSender","KosReceiver","KosSender","Msg","Msg","NaorPinkasReceiver","NaorPinkasSender","RandomReceiver","RandomSender","Receiver","Sender","alsz","chou_orlandi","dummy","init","init","init_fixed_key","kos","kos_delta","naor_pinkas","receive","receive_correlated","receive_random","send","send_correlated","send_random","Receiver","Sender","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","init","init","init_fixed_key","into","into","receive","receive_correlated","receive_random","send","send_correlated","send_random","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Receiver","Sender","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","init","init","into","into","receive","send","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Receiver","Sender","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","init","init","into","into","receive","send","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Receiver","Sender","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","init","init","init_fixed_key","into","into","receive","receive_correlated","receive_random","send","send_correlated","send_random","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Receiver","Sender","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","init","init","init_fixed_key","into","into","receive","receive_correlated","receive_random","send","send_correlated","send_random","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Receiver","Sender","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","init","init","into","into","receive","send","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Msg","Msg","SVoleReceiver","SVoleSender","delta","duplicate","duplicate","init","init","receive","send","wykw","LPN_EXTEND_LARGE","LPN_EXTEND_MEDIUM","LPN_EXTEND_SMALL","LPN_SETUP_LARGE","LPN_SETUP_MEDIUM","LPN_SETUP_SMALL","LpnParams","Receiver","Sender","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","delta","duplicate","duplicate","eq","from","from","from","init","init","into","into","into","receive","send","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["ocelot","","","","","","","","","","","","","","","","","","","","","","","","","","ocelot::Error","","","ocelot::edabits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ocelot::oprf","","","","","","","","","","","","","","","","","ocelot::oprf::kkrt","","","","","","","","","","","","","","","","","","","","","","","","ocelot::oprf::kmprt","","","","","","","","","","","","","","","","","","","","","","ocelot::ot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ocelot::ot::alsz","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ocelot::ot::chou_orlandi","","","","","","","","","","","","","","","","","","","","","","","","","","ocelot::ot::dummy","","","","","","","","","","","","","","","","","","","","","","","","","","ocelot::ot::kos","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ocelot::ot::kos_delta","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ocelot::ot::naor_pinkas","","","","","","","","","","","","","","","","","","","","","","","","","","ocelot::svole","","","","","","","","","","","","ocelot::svole::wykw","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Coin tossing failed.","Correlation check failed i.e, <code>w != u&#39;Δ + v</code>.","EQ check failed.","Errors produced by <code>ocelot</code>.","The input length is invalid.","Commitment opening failed.","An I/O error has occurred.","Some other error, given by <code>String</code>.","","","This is a library implementing the field conversion using …","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Oblivious PRF traits + instantiations.","Oblivious transfer traits + instantiations.","","(Random) subfield vector oblivious linear evaluation …","","","","","","","","","","","","EdabitsProver struct","EdabitsVerifier struct","F_com protocol for the Prover","F_com protocol for the Verififier","The types <code>MacProver</code> and <code>MacVerifier</code> hold the data …","<code>MacVerifier</code> type","Prover for the edabits conversion protocol","Verifier for the edabits conversion protocol","Add two Macs.","Add two Macs.","Add a constant to a Mac.","Add a constant to a Mac.","Multiply by a constant a Mac.","Multiply a Mac by a constant.","","","","","","","","","","","","","","","","","Check that a batch of Macs are zero.","Check that a batch of Macs are zero.","","","","","","","","","","","conversion checking","conversion checking","Duplicate the functionality.","Duplicate the functionality.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the delta Mac.","initialize the prover","initialize the verifier","Initialize the functionality.","Initialize the functionality.","Input a slice of values and returns a vector of its macs.","Input a number of values and returns the associated macs.","Input a single value and returns its mac.","Input a single value and returns its associated Mac.","lower level implementation of <code>input</code> with pre-defined out …","lower level implementation of <code>input</code> for predefined  out …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Negative Mac.","Negative of a Mac.","Open Macs.","Open Macs.","Quicksilver multiplication check.","Quicksilver multiplication check.","Returns a random mac.","Returns a random mac.","generate random edabits","generate random edabits","Generate random triples","Generate random triples","Subtraction of two Macs.","Subtraction of two Macs.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wolverine multiplication check.","Wolverine multiplication check","PRF input.","KKRT oblivious PRF receiver using ALSZ OT extension with …","KKRT oblivious PRF sender using ALSZ OT extension with …","KMPRT hash-based OPPRF receiver, using KKRT as the …","KMPRT hash-based OPPRF sender, using KKRT as the …","Trait containing the associated types used by an oblivious …","PRF output.","Trait for an oblivious PRF receiver.","PRF seed.","Trait for an oblivious PRF sender.","Computes the oblivious PRF on seed <code>seed</code> and input <code>input</code>.","Runs any one-time initialization.","Runs any one-time initialization.","Implementation of the batched, related-key oblivious …","Implementation of the hash-based multi-use OPPRF of …","Runs the oblivious PRF on inputs <code>inputs</code>, returning the …","Runs <code>m</code> OPRF instances as the sender, returning the OPRF …","KKRT oblivious PRF receiver.","KKRT oblivious PRF sender.","","","","","","Encode <code>input</code> into <code>output</code>. This is <em>not</em> the same as the …","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","KMPRT oblivious programmable PRF receiver.","KMPRT hashing-based OPPRF sender.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize the OPPRF sender.","Initialize the OPPRF receiver.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Run the OPPRF on inputs provided by the <code>inputs</code> slice.","Run the OPPRF for <code>ninputs</code> inputs with the pairs given in …","","","","","","","","","Instantiation of the ALSZ OT extension receiver, using …","Instantiation of the ALSZ OT extension sender, using …","Instantiation of the Chou-Orlandi OT receiver.","Instantiation of the Chou-Orlandi OT sender.","Trait for one-out-of-two <em>correlated</em> oblivious transfer …","Trait for one-out-of-two <em>correlated</em> oblivious transfer …","Instantiation of the dummy OT receiver.","Instantiation of the dummy OT sender.","Trait for initializing an oblivious transfer object with a …","Instantiation of the KOS Delta-OT extension receiver, …","Instantiation of the KOS Delta-OT extension sender, using …","Instantiation of the KOS OT extension receiver, using …","Instantiation of the KOS OT extension sender, using …","Message type, restricted to types that are …","Message type, restricted to types that are …","Instantiation of the Naor-Pinkas OT receiver.","Instantiation of the Naor-Pinkas OT sender.","Trait for one-out-of-two <em>random</em> oblivious transfer from …","Trait for one-out-of-two <em>random</em> oblivious transfer from …","Trait for one-out-of-two oblivious transfer from the …","Trait for one-out-of-two oblivious transfer from the sender…","Implementation of the Asharov-Lindell-Schneider-Zohner …","Implementation of the Chou-Orlandi oblivious transfer …","Implementation of an <strong>entirely insecure</strong> oblivious transfer …","Runs any one-time initialization to create the oblivious …","Runs any one-time initialization to create the oblivious …","Runs any one-time initialization to create the oblivious …","Implementation of the Keller-Orsini-Scholl oblivious …","Implementation of the Keller-Orsini-Scholl oblivious …","Implementation of the Naor-Pinkas oblivious transfer …","Receives messages.","Correlated oblivious transfer receive.","Random oblivious transfer receive.","Sends messages.","Correlated oblivious transfer send. Takes as input an …","Random oblivious transfer send. Returns a vector of tuples …","Oblivious transfer receiver.","Oblivious transfer sender.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Oblivious transfer receiver.","Oblivious transfer sender.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Oblivious transfer receiver.","Oblivious transfer sender.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Oblivious transfer extension receiver.","Oblivious transfer extension sender.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Oblivious transfer extension receiver.","Oblivious transfer extension sender.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Oblivious transfer receiver.","Oblivious transfer sender.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Finite field for which sVOLEs are generated.","Finite field for which sVOLEs are generated.","Trait for an sVOLE receiver.","Trait for an sVOLE sender.","Returns delta.","Duplicates the sender’s state.","Duplicates the receiver’s state.","Runs any one-time initialization.","Runs any one-time initialization.","Generates sVOLEs.","Generates sVOLEs.","Implementation of the Weng-Yang-Katz-Wang random subfield …","Large LPN parameters for extend phase.","Medium LPN parameters for extend phase.","Small LPN parameters for extend phase.","Large LPN parameters for setup phase.","Medium LPN parameters for setup phase.","Small LPN parameters for setup phase.","Type for LPN parameters used internally in the setup phase …","Subfield VOLE receiver.","Subfield VOLE sender.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,0,1,1,1,1,1,58,59,60,12,14,12,0,0,0,0,0,0,0,0,11,13,11,13,11,13,19,28,11,13,16,17,12,14,19,28,11,13,16,17,12,14,11,13,16,17,12,14,16,17,12,14,12,14,19,28,11,13,12,14,12,14,19,28,11,13,16,17,12,14,13,19,28,11,13,11,13,11,13,11,13,19,28,11,13,16,17,12,14,11,13,11,13,11,13,11,13,19,28,19,28,11,13,16,17,12,14,19,28,11,13,16,17,12,14,19,28,11,13,16,17,12,14,19,28,11,13,16,17,12,14,19,28,11,13,16,17,12,14,11,13,61,0,0,0,0,0,61,0,61,0,37,37,39,0,0,39,37,0,0,34,36,34,36,34,34,34,36,34,36,34,36,36,34,34,36,34,36,34,36,34,36,0,0,38,40,38,40,38,40,38,40,38,40,40,38,38,40,38,40,38,40,38,40,0,0,0,0,0,0,0,0,0,0,0,0,0,35,32,0,0,0,0,0,0,0,0,0,35,32,62,0,0,0,32,63,64,35,65,66,0,0,42,43,42,43,42,43,42,43,42,43,42,42,43,43,43,43,42,42,42,42,43,42,43,42,43,42,43,42,43,0,0,44,45,44,45,44,45,44,45,44,45,44,45,45,44,44,45,44,45,44,45,44,45,44,45,0,0,47,48,47,48,47,48,47,48,47,48,47,48,48,47,47,48,47,48,47,48,47,48,47,48,0,0,50,51,50,51,50,51,50,51,50,51,50,50,51,51,51,51,50,50,50,50,51,50,51,50,51,50,51,50,51,0,0,52,53,52,53,52,53,52,53,52,53,52,52,53,53,53,53,52,52,52,52,53,52,53,52,53,52,53,52,53,0,0,54,55,54,55,54,55,54,55,54,55,54,55,55,54,54,55,54,55,54,55,54,55,54,55,67,68,0,0,68,67,68,67,68,68,67,0,0,0,0,0,0,0,0,0,0,57,56,31,57,56,31,31,31,56,57,56,31,57,56,31,57,56,57,56,31,56,57,31,57,56,31,57,56,31,57,56,31,57,56,31],"f":[0,0,0,0,0,0,0,0,[[]],[[]],0,[[1,2],3],[[1,2],3],[4,1],[[]],[5,1],[[]],0,0,[6],0,[[],7],[[],8],[[],8],[[],9],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[11,[10]],[12,[10]],[12,[10]]],[[12,[10]]]],[[[13,[10]],[14,[10]],[14,[10]]],[[14,[10]]]],[[[11,[10]],[12,[10]]],[[12,[10]]]],[[[13,[10]],[14,[10]]],[[14,[10]]]],[[[11,[10]],[12,[10]]],[[12,[10]]]],[[[13,[10]],[14,[10]]],[[14,[10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[11,[10]]],[[8,[1]]]],[[[13,[10]]],[[8,[1]]]],[[[16,[[0,[15,10]]]]],[[16,[[0,[15,10]]]]]],[[[17,[[0,[15,10]]]]],[[17,[[0,[15,10]]]]]],[[[12,[[0,[15,10]]]]],[[12,[[0,[15,10]]]]]],[[[14,[[0,[15,10]]]]],[[14,[[0,[15,10]]]]]],[[]],[[]],[[]],[[]],[[[12,[10]],[12,[10]],18],[[12,[10]]]],[[[14,[10]],[14,[10]],18],[[14,[10]]]],[[[19,[10]],20,20,[26,[[25,[[24,[[22,[21]],[23,[21]]]]]]]],27],[[8,[1]]]],[[[28,[10]],20,20,[26,[[25,[[24,[[22,[21]],[23,[21]]]]]]]],27],[[8,[1]]]],[[[11,[10]]],[[8,[[11,[10]],1]]]],[[[13,[10]]],[[8,[[13,[10]],1]]]],[[[12,[[0,[29,10]]]],12],27],[[[14,[[0,[29,10]]]],14],27],[[[12,[[0,[30,10]]]],2],3],[[[14,[[0,[30,10]]]],2],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[13,[10]]],10],[[31,31],[[8,[[19,[10]],1]]]],[[31,31],[[8,[[28,[10]],1]]]],[[31,31],[[8,[[11,[10]],1]]]],[[31,31],[[8,[[13,[10]],1]]]],[[[11,[10]]],[[8,[[25,[10]],1]]]],[[[13,[10]],20],[[8,[[25,[[14,[10]]]],1]]]],[[[11,[10]]],[[8,[10,1]]]],[[[13,[10]]],[[8,[[14,[10]],1]]]],[[[11,[10]],25],[[8,[1]]]],[[[13,[10]],20,25],[[8,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[11,[10]],[12,[10]]],[[12,[10]]]],[[[13,[10]],[14,[10]]],[[14,[10]]]],[[[11,[10]]],[[8,[1]]]],[[[13,[10]],25],[[8,[1]]]],[[[11,[10]]],[[8,[1]]]],[[[13,[10]]],[[8,[1]]]],[[[11,[10]]],[[8,[[12,[10]],1]]]],[[[13,[10]]],[[8,[[14,[10]],1]]]],[[[19,[10]],20,20],[[8,[[25,[[16,[10]]]],1]]]],[[[28,[10]],20,20],[[8,[[25,[[17,[10]]]],1]]]],[[[19,[10]],20,25],[[8,[1]]]],[[[28,[10]],20,25],[[8,[1]]]],[[[11,[10]],[12,[10]],[12,[10]]],[[12,[10]]]],[[[13,[10]],[14,[10]],[14,[10]]],[[14,[10]]]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[11,[10]]],[[8,[1]]]],[[[13,[10]]],[[8,[1]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[],[[8,[1]]]],[[],[[8,[1]]]],0,0,[[],[[8,[25,1]]]],[20,[[8,[25,1]]]],0,0,[[]],[[]],[[]],[[]],[[[34,[[0,[32,33]]]]]],[[[34,[[0,[32,33]]]]]],[[]],[[]],[[],[[8,[[34,[[0,[32,33]]]],1]]]],[[],[[8,[[36,[[0,[35,33]]]],1]]]],[[]],[[]],[[[36,[[0,[35,33]]]]],[[8,[25,1]]]],[[[34,[[0,[32,33]]]],20],[[8,[25,1]]]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],[[8,[[38,[[0,[37,33]]]],1]]]],[[],[[8,[[40,[[0,[39,33]]]],1]]]],[[]],[[]],[[[40,[[0,[39,33]]]]],[[8,[[25,[41]],1]]]],[[[38,[[0,[37,33]]]],20],[[8,[1]]]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[8,[1]]]],[[],[[8,[1]]]],[[],[[8,[1]]]],0,0,0,[[],[[8,[25,1]]]],[[],[[8,[25,1]]]],[[],[[8,[25,1]]]],[[],[[8,[1]]]],[[],[[8,[25,1]]]],[20,[[8,[25,1]]]],0,0,[[]],[[]],[[]],[[]],[[[42,[[0,[32,33]]]],2],3],[[[43,[[0,[35,33]]]],2],3],[[]],[[]],[[],[[8,[[42,[[0,[32,33]]]],1]]]],[[],[[8,[[43,[[0,[35,33]]]],1]]]],[[],[[8,[[42,[[0,[32,33]]]],1]]]],[[]],[[]],[[[43,[[0,[35,33]]]]],[[8,[25,1]]]],[[[43,[[0,[35,33]]]]],[[8,[25,1]]]],[[[43,[[0,[35,33]]]]],[[8,[25,1]]]],[[[42,[[0,[32,33]]]]],[[8,[1]]]],[[[42,[[0,[32,33]]]]],[[8,[25,1]]]],[[[42,[[0,[32,33]]]],20],[[8,[25,1]]]],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[44,2],3],[[45,2],3],[[]],[[]],[[],[[8,[44,1]]]],[[],[[8,[45,1]]]],[[]],[[]],[45,[[8,[[25,[46]],1]]]],[44,[[8,[1]]]],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[47,2],3],[[48,2],3],[[]],[[]],[[],[[8,[47,1]]]],[[],[[8,[48,1]]]],[[]],[[]],[48,[[8,[[25,[46]],1]]]],[47,[[8,[1]]]],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[[50,[[0,[32,49]]]],2],3],[[[51,[[0,[35,49]]]],2],3],[[]],[[]],[[],[[8,[[50,[[0,[32,49]]]],1]]]],[[],[[8,[[51,[[0,[35,49]]]],1]]]],[[],[[8,[[50,[[0,[32,49]]]],1]]]],[[]],[[]],[[[51,[[0,[35,49]]]]],[[8,[[25,[46]],1]]]],[[[51,[[0,[35,49]]]]],[[8,[25,1]]]],[[[51,[[0,[35,49]]]]],[[8,[25,1]]]],[[[50,[[0,[32,49]]]]],[[8,[1]]]],[[[50,[[0,[32,49]]]]],[[8,[25,1]]]],[[[50,[[0,[32,49]]]],20],[[8,[25,1]]]],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[[52,[[0,[32,49]]]],2],3],[[[53,[[0,[35,49]]]],2],3],[[]],[[]],[[],[[8,[[52,[[0,[32,49]]]],1]]]],[[],[[8,[[53,[[0,[35,49]]]],1]]]],[[],[[8,[[52,[[0,[32,49]]]],1]]]],[[]],[[]],[[[53,[[0,[35,49]]]]],[[8,[[25,[46]],1]]]],[[[53,[[0,[35,49]]]]],[[8,[25,1]]]],[[[53,[[0,[35,49]]]]],[[8,[25,1]]]],[[[52,[[0,[32,49]]]]],[[8,[1]]]],[[[52,[[0,[32,49]]]]],[[8,[25,1]]]],[[[52,[[0,[32,49]]]],20],[[8,[25,1]]]],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[54,2],3],[[55,2],3],[[]],[[]],[[],[[8,[54,1]]]],[[],[[8,[55,1]]]],[[]],[[]],[55,[[8,[[25,[46]],1]]]],[54,[[8,[1]]]],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[]],[[]],0,0,0,0,[[]],[[],[[8,[1]]]],[[],[[8,[1]]]],[[31,31],[[8,[1]]]],[[31,31],[[8,[1]]]],[25,[[8,[1]]]],[25,[[8,[1]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[31,31],[[]],[[[56,[10]]],10],[[[57,[10]]],[[8,[[57,[10]],1]]]],[[[56,[10]]],[[8,[[56,[10]],1]]]],[[31,31],27],[[]],[[]],[[]],[[31,31],[[8,[[57,[10]],1]]]],[[31,31],[[8,[[56,[10]],1]]]],[[]],[[]],[[]],[[[56,[10]],25],[[8,[1]]]],[[[57,[10]],25],[[8,[1]]]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[]],[[]],[[]]],"p":[[4,"Error"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Error"],[3,"Demand"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"FiniteField"],[3,"FComProver"],[3,"MacProver"],[3,"FComVerifier"],[3,"MacVerifier"],[8,"Clone"],[3,"EdabitsProver"],[3,"EdabitsVerifier"],[3,"Choice"],[3,"ProverConv"],[15,"usize"],[3,"TcpStream"],[3,"BufReader"],[3,"BufWriter"],[3,"SyncChannel"],[3,"Vec"],[4,"Option"],[15,"bool"],[3,"VerifierConv"],[8,"PartialEq"],[8,"Debug"],[3,"LpnParams"],[8,"Receiver"],[8,"SemiHonest"],[3,"Sender"],[8,"Sender"],[3,"Receiver"],[8,"Sender"],[3,"Sender"],[8,"Receiver"],[3,"Receiver"],[3,"Block512"],[3,"Sender"],[3,"Receiver"],[3,"Sender"],[3,"Receiver"],[3,"Block"],[3,"Sender"],[3,"Receiver"],[8,"Malicious"],[3,"Sender"],[3,"Receiver"],[3,"Sender"],[3,"Receiver"],[3,"Sender"],[3,"Receiver"],[3,"Receiver"],[3,"Sender"],[13,"IoError"],[13,"Other"],[13,"CoinTossError"],[8,"ObliviousPrf"],[8,"FixedKeyInitializer"],[8,"CorrelatedReceiver"],[8,"RandomReceiver"],[8,"CorrelatedSender"],[8,"RandomSender"],[8,"SVoleSender"],[8,"SVoleReceiver"]]},\
"popsicle":{"doc":"","t":[13,13,4,13,13,13,13,6,6,13,13,6,6,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,0,11,12,12,12,12,12,12,12,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5],"n":["CoinTossError","CuckooHashFull","Error","InvalidCuckooParameters","InvalidCuckooSetSize","InvalidPayloadsLength","IoError","MultiPartyReceiver","MultiPartySender","OprfError","PsiProtocolError","Receiver","Sender","borrow","borrow_mut","fmt","fmt","from","from","from","from","into","kmprt","psz","to_string","try_from","try_into","type_id","utils","vzip","0","0","0","0","0","nhashes","nitems","PartyId","Receiver","Sender","borrow","borrow","borrow_mut","borrow_mut","from","from","init","init","into","into","receive","send","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Receiver","Sender","borrow","borrow","borrow_mut","borrow_mut","from","from","init","init","into","into","receive","receive_payloads","send","send_payloads","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","compress_and_hash_inputs","rand_u64_vec","rand_vec","rand_vec_vec"],"q":["popsicle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","popsicle::Error","","","","","","","popsicle::kmprt","","","","","","","","","","","","","","","","","","","","","","","popsicle::psz","","","","","","","","","","","","","","","","","","","","","","","","popsicle::utils","","",""],"d":["Coin tossing failed.","The cuckoo hash is full.","Errors produced by the private set intersection protocols.","The provided cuckoo hash parameters are invalid.","The provided cuckoo hash set size is invalid.","Not enough payloads.","An input/output error occurred.","Multi-party private set intersection receiver.","Multi-party private set intersection sender.","The underlying oblivious PRF failed.","An error occurred in the PSI protocol.","Private set intersection receiver.","Private set intersection sender.","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Implementation of the “…","Implementation of the Pinkas-Schneider-Zohner private set …","","","","","Util mostly in support of cuckoo hashing.","","","","","","","Number of hashes.","Number of items.","The party number for each party.","KMPRT receiver - there can only be one of these.","KMPRT sender - there can be many of these.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize a PSI sender.","Initialize the PSI receiver.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Send inputs and receive result - only one party should …","Send inputs to all parties and particpate in one party …","","","","","","","","","Private set intersection receiver.","Private set intersection sender.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize the PSI sender.","Initialize the PSI receiver.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Run the PSI protocol over <code>inputs</code>.","Run the PSI protocol over <code>inputs</code>, receiving a vector of …","Run the PSI protocol over <code>inputs</code>.","Run the PSI protocol over <code>inputs</code>. Returns a random key for …","","","","","","","","","Compress an arbitrary vector into a 128-bit chunk, leaving …","used in tests","used in tests","used in tests"],"i":[1,1,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,21,22,23,24,25,26,26,0,0,0,11,12,11,12,11,12,11,12,11,12,12,11,11,12,11,12,11,12,11,12,0,0,15,16,15,16,15,16,15,16,15,16,16,16,15,15,15,16,15,16,15,16,15,16,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[1,2],3],[[1,2],3],[[]],[4,1],[5,1],[6,1],[[]],0,0,[[],7],[[],8],[[],8],[[],9],0,[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[10,[[8,[11,1]]]],[[],[[8,[12,1]]]],[[]],[[]],[12,[[8,[[14,[13]],1]]]],[11,[[8,[1]]]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],[[8,[15,1]]]],[[],[[8,[16,1]]]],[[]],[[]],[16,[[8,[[14,[[14,[17]]]],1]]]],[16,[[8,[[18,[[14,[17]],13]],1]]]],[15,[[8,[1]]]],[15,[[8,[[14,[13]],1]]]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[]],[[]],[13,[[14,[13]]]],[[19,20],[[14,[20]]]],[19,[[14,[17]]]],[[19,19],[[14,[[14,[17]]]]]]],"p":[[4,"Error"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Error"],[4,"Error"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"PartyId"],[3,"Sender"],[3,"Receiver"],[3,"Block"],[3,"Vec"],[3,"Sender"],[3,"Receiver"],[15,"u8"],[3,"HashMap"],[15,"usize"],[15,"u64"],[13,"CoinTossError"],[13,"OprfError"],[13,"IoError"],[13,"InvalidCuckooSetSize"],[13,"PsiProtocolError"],[13,"InvalidCuckooParameters"]]},\
"scuttlebutt":{"doc":"Scuttlebutt provides many utility functions for …","t":[12,17,2,3,3,3,3,3,3,2,17,3,8,8,2,3,3,6,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,0,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,3,3,3,3,6,6,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,11,11,11,11,11,11,11,5,5,11,11,11,11,11,12,8,16,16,3,11,11,10,11,10,11,11,10,11,11,10,11,12,11,11,11,11,6,6,16,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,18,8,16,16,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,18,5,5,5,5,5,5,5,5,5,10,3,3,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,6,16,8,8,18,18,10,11,11,11,10,11,3,3,3,16,4,8,16,16,8,8,16,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,10,11,0,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,5,5,5,5,5,5,5,5,5,5],"n":["0","AES_HASH","AbstractChannel","Aes128","Aes256","AesHash","AesRng","Block","Block512","Channel","FIXED_KEY_AES128","HashChannel","Malicious","SemiHonest","SymChannel","SyncChannel","TrackChannel","TrackUnixChannel","UniformIntegersUnderBound","UnixChannel","as_bits","as_bits","as_mut","as_mut","as_mut_bits","as_mut_bits","as_ref","as_ref","as_rngcore","bitand","bitand_assign","bitxor","bitxor","bitxor_assign","bitxor_assign","bloomfilter","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound","ccr_hash","channel","clmul","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cointoss","commitment","conditional_select","cr_hash","default","default","default","deserialize","deserialize","encrypt","encrypt","encrypt8","encrypt_blocks","eq","eq","field","fill_bytes","flip","fmt","fmt","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","from","from","from","from","from","from","from_rng","from_seed","generic_array_length","hash","hash","hash_pt","into","into","into","into","into","into","into","is_valid_bit_pattern","is_valid_bit_pattern","lsb","new","new","new","new","new","next_u32","next_u64","partial_cmp","partial_cmp","prefix","prefix_mut","prime_field_using_ff","random_bits","random_bits_custom_size","ring","sample","sample_20","serialization","serialize","serialize","set_lsb","tccr_hash","tccr_hash_many","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","track_unix_channel_pair","try_as_bits","try_as_bits","try_as_mut_bits","try_as_mut_bits","try_fill_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_slice","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unix_channel_pair","utils","vzip","vzip","vzip","vzip","vzip","vzip","vzip","BloomFilter","as_bytes","bin","bins","borrow","borrow_mut","compute_expansion","compute_nhashes","contains","eq","fmt","from","from_bytes","insert","into","len","new","nhashes","partial_cmp","try_from","try_into","type_id","vzip","with_false_positive_prob","AbstractChannel","Channel","HashChannel","SymChannel","SyncChannel","TrackChannel","TrackUnixChannel","UnixChannel","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","finish","flush","flush","flush","flush","flush","flush","from","from","from","from","from","into","into","into","into","into","kilobits_read","kilobits_written","kilobytes_read","kilobytes_written","new","new","new","new","new","read_block","read_block512","read_blocks","read_bool","read_bytes","read_bytes","read_bytes","read_bytes","read_bytes","read_bytes","read_pt","read_serializable","read_u16","read_u32","read_u64","read_u8","read_usize","read_vec","reader","reader","total_kilobits","total_kilobytes","track_unix_channel_pair","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unix_channel_pair","vzip","vzip","vzip","vzip","vzip","write_block","write_block512","write_bool","write_bytes","write_bytes","write_bytes","write_bytes","write_bytes","write_bytes","write_pt","write_serializable","write_u16","write_u32","write_u64","write_u8","write_usize","writer","writer","CommitmentCheckFailed","Error","IoError","borrow","borrow_mut","fmt","fmt","from","from","into","receive","send","to_string","try_from","try_into","type_id","vzip","0","Commitment","Output","Seed","ShaCommitment","borrow","borrow_mut","check","check","finish","finish","from","input","input","into","new","new","seed","try_from","try_into","type_id","vzip","Degree","DegreeModulo","DegreeModulo","F128b","F128p","F2","F256p","F2e19x3e26","F384p","F384q","F400p","F40b","F45b","F56b","F61p","F63b","F64b","Fbls12381","Fbn254","FiniteField","GENERATOR","IsSubFieldOf","NumberOfBitsInBitDecomposition","PrimeField","PrimeFiniteField","SmallBinaryField","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","bit_decomposition","bit_decomposition","bit_decomposition","bit_decomposition","bit_decomposition","bit_decomposition","bit_decomposition","bit_decomposition","bit_decomposition","bit_decomposition","bit_decomposition","bit_decomposition","bit_decomposition","bit_decomposition","bit_decomposition","bit_decomposition","bit_decomposition","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","decompose","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","decompose_superfield","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fft","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","form_superfield","form_superfield","form_superfield","form_superfield","form_superfield","form_superfield","form_superfield","form_superfield","form_superfield","form_superfield","form_superfield","form_superfield","form_superfield","form_superfield","form_superfield","form_superfield","form_superfield","form_superfield","form_superfield","form_superfield","form_superfield","form_superfield","form_superfield","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_lower_bits","from_lower_bits","from_lower_bits","from_lower_bits","from_lower_bits","from_str_radix","from_subfield","from_uniform_bytes","from_uniform_bytes","from_uniform_bytes","from_uniform_bytes","from_uniform_bytes","from_uniform_bytes","from_uniform_bytes","from_uniform_bytes","from_uniform_bytes","from_uniform_bytes","from_uniform_bytes","from_uniform_bytes","from_uniform_bytes","from_uniform_bytes","from_uniform_bytes","from_uniform_bytes","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_one","is_one","is_one","is_one","is_one","is_one","is_one","is_one","is_one","is_one","is_one","is_one","is_one","is_one","is_one","is_one","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","polynomial","polynomial_modulus","polynomial_modulus","polynomial_modulus","polynomial_modulus","polynomial_modulus","polynomial_modulus","polynomial_modulus","polynomial_modulus","polynomial_modulus","polynomial_modulus","polynomial_modulus","polynomial_modulus","polynomial_modulus","polynomial_modulus","polynomial_modulus","polynomial_modulus","polynomial_modulus","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","random","random","random","random","random","random","random","random","random","random","random","random","random","random","random","random","random_nonzero","reduce","reduce","reduce","reduce","reduce","reduce_vectored","reduce_vectored","reduce_vectored","rem","roots","roots","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","FieldForFFT","PHI_EXP","fft2","fft2_in_place","fft2_inverse","fft2_inverse_in_place","fft3","fft3_in_place","fft3_inverse","fft3_inverse_in_place","lagrange_interpolation_at_zero","roots","NewtonPolynomial","Polynomial","add_assign","basis_polynomial","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","coefficients","constant","constant","ct_eq","degree","divmod","eq","eval","eval","eval_with_basis_polynomial","fmt","fmt","from","from","from","index","index_mut","interpolate","interpolate_in_place","into","into","lagrange_coefficient","lagrange_denominator","lagrange_numerator","mul_assign","mul_assign","new","one","random","sub_assign","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","x","zero","AnyArrayLength","Arr","OutputArrayLength","FiniteRing","IsSubRingOf","ONE","ZERO","from_uniform_bytes","pow","pow_bounded","pow_var_time","random","random_nonzero","BiggerThanModulus","ByteElementDeserializer","ByteElementSerializer","ByteReprLen","BytesDeserializationCannotFail","CanonicalSerialize","Deserializer","FromBytesError","SequenceDeserializer","SequenceSerializer","Serializer","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","finish","finish","fmt","fmt","fmt","fmt","from","from","from","from","from_bytes","into","into","into","into","new","new","new","new","provide","provide","read","read","serde_vec","serialized_size","serialized_size","to_bytes","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write","write","deserialize","serialize","and","and_inplace","pack_bits","unpack_bits","xor","xor_inplace","xor_inplace_n","xor_n"],"q":["scuttlebuttscuttlebutt::bloomfilter","","","","","","","","","","","","","","","","","","","","","","","","scuttlebutt::channel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scuttlebutt::cointoss","","","","","","","","","","","","","","","","","scuttlebutt::cointoss::Error","scuttlebutt::commitment","","","","","","","","","","","","","","","","","","","","","scuttlebutt::fieldscuttlebutt::field::fft","","","","","","","","","","","","scuttlebutt::field::polynomial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scuttlebutt::generic_array_length","","","scuttlebutt::ring","","","","","","","","","","scuttlebutt::serialization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","scuttlebutt::serialization::serde_vec","","scuttlebutt::utils","","","","","","",""],"d":["","<code>AesHash</code> with a fixed key.","","AES-128, encryption only.","AES-256, encryption only.","AES-based correlation-robust hash function.","Implementation of a random number generator based on …","A 128-bit chunk.","A 512-bit value.","","Fixed-key AES-128.","An instantiation of the <code>AbstractChannel</code> trait which …","A marker trait denoting that the given scheme is …","A marker trait denoting that the given scheme is …","","A channel that implements <code>AbstractChannel</code> as well as <code>Send</code> …","A channel wrapping another channel for tracking the number …","A TrackChannel which uses UnixStreams.","Sample <code>u32</code>s uniformly from <code>[0, bound)</code>.","A SyncChannel which uses UnixStreams.","","","","","","","","","","","","","","","","Implementation of a bloom filter.","","","","","","","","","","","","","","","The exclusive bound of the integers produced by this …","Circular correlation-robust hash function (cf. …","Module for encapsulating communication channels for <code>swanky</code>.","Carryless multiplication.","","","","","","","","","","","","","","","Implementation of a simple two-party coin tossing protocol …","A trait defining a Commitment Scheme and an implementation …","","Correlation-robust hash function for 128-bit inputs (cf. …","","","","","","Encrypt a block, outputting the ciphertext.","Encrypt a block, outputting the ciphertext.","Encrypt eight blocks at a time, outputting the ciphertexts.","Encrypt up to 32 blocks at a time, outputting the …","","","This module defines finite fields.","","Flip all bits.","","","","","","","Create a new RNG using a random seed from this one.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Helper types to make using the <code>generic-array</code> easier.","","","Hash an elliptic curve point <code>pt</code> and tweak <code>tweak</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Return the least significant bit.","Initialize the hash function using <code>key</code>.","Create a new <code>Aes128</code> object, using <code>key</code> as the AES key.","Create a new <code>Aes256</code> object, using <code>key</code> as the AES key.","Create the distribution.","Create a new random number generator using a random seed …","","","","","Return the first <code>n</code> bytes, where <code>n</code> must be <code>&lt;= 64</code>.","Return the first <code>n</code> bytes as mutable, where <code>n</code> must be <code>&lt;= 64</code>.","This macro constructs a prime finite field using the <code>ff</code> …","Generate random bits.","Generate <code>N * 128</code> random bits.","This module defines finite rings.","Produce <code>Aes128EncryptOnly::BLOCK_COUNT_HINT * 4</code> uniformly …","Produce 20 uniformly distributed <code>u32</code>s under the given …","Serialization types for algebraic structures.","","","Set the least significant bit.","Tweakable circular correlation robust hash function (cf. …","Batch tweakable circular correlation robust hash function","","","","","","","","","Convenience function to create a pair of TrackUnixChannels …","","","","","","","","","","","","","","Try to create a <code>Block</code> from a slice of bytes. The slice …","","","","","","","","","","","","","","","Convenience function to create a pair of UnixChannels for …","Useful utility functions.","","","","","","","","Simple implementation of a Bloom Filter. Which is …","Get bloom filter bins packed in bytes.","Compute the bin that this value would go to in a …","Get bloom filter bins.","","","Compute required expansion for false positive probability <code>p</code>…","Compute required number of hash functions for false …","Check whether an item exists in the BloomFilter.","","","Returns the argument unchanged.","Create bloom filter from bytes.","Insert an item into the BloomFilter.","Calls <code>U::from(self)</code>.","Get the number of bins in this BloomFilter.","Create a new BloomFilter with <code>size</code> entries, using <code>nhashes</code> …","Get the number of hash functions in this BloomFilter.","","","","","","Create a new BloomFilter with false positive probability <code>p</code> …","A trait for managing I/O. <code>AbstractChannel</code>s are clonable, …","A standard read/write channel that implements …","An instantiation of the <code>AbstractChannel</code> trait which …","Standard Read/Write channel built from a symmetric stream.","A channel that implements <code>AbstractChannel</code> as well as <code>Send</code> …","A channel wrapping another channel for tracking the number …","A TrackChannel which uses UnixStreams.","A SyncChannel which uses UnixStreams.","","","","","","","","","","","Clear the number of bits read/written.","Clone the channel.","","","","","","Consume the channel and output the hash of all the …","Flush the channel.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the number of kilobits read from the channel.","Return the number of kilobits written to the channel.","Return the number of kilobytes read from the channel.","Return the number of kilobytes written to the channel.","Make a new <code>HashChannel</code> from a <code>reader</code> and a <code>writer</code>.","Make a new <code>Channel</code> from a <code>reader</code> and a <code>writer</code>.","Make a new <code>TrackChannel</code> from a <code>reader</code> and a <code>writer</code>.","Make a new <code>Channel</code> from a <code>reader</code> and a <code>writer</code>.","Make a new <code>Channel</code> from a stream.","Read a <code>Block</code> from the channel.","Read a <code>Block512</code> from the channel.","Read <code>n</code> <code>Block</code>s from the channel.","Read a <code>bool</code> from the channel.","Read a slice of <code>u8</code>s from the channel.","","","","","","Read a <code>RistrettoPoint</code> from the channel.","Read a <code>CanonicalSerialize</code> object from the channel.","Read a <code>u16</code> from the channel.","Read a <code>u32</code> from the channel.","Read a <code>u64</code> from the channel.","Read a <code>u8</code> from the channel.","Read a <code>usize</code> from the channel.","Read <code>nbytes</code> from the channel, and return it as a <code>Vec</code>.","Return a reader object wrapped in <code>Arc&lt;Mutex&lt;R&gt;&gt;</code>.","Return a reader object wrapped in <code>Rc&lt;RefCell&gt;</code>.","Return the total amount of communication on the channel.","Return the total amount of communication on the channel as …","Convenience function to create a pair of TrackUnixChannels …","","","","","","","","","","","","","","","","Convenience function to create a pair of UnixChannels for …","","","","","","Write a <code>Block</code> to the channel.","Write a <code>Block512</code> to the channel.","Write a <code>bool</code> to the channel.","Write a slice of <code>u8</code>s to the channel.","","","","","","Write a <code>RistrettoPoint</code> to the channel.","Write a <code>CanonicalSerialize</code> object to the channel.","Write a <code>u16</code> to the channel.","Write a <code>u32</code> to the channel.","Write a <code>u64</code> to the channel.","Write a <code>u8</code> to the channel.","Write a <code>usize</code> to the channel.","Return a writer object wrapped in <code>Arc&lt;Mutex&lt;W&gt;&gt;</code>.","Return a writer object wrapped in <code>Rc&lt;RefCell&gt;</code>.","The commitment check failed.","Errors produced by the coin tossing protocol.","An I/O error occurred.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Coin tossing receiver.","Coin tossing sender.","","","","","","","Generic commitment scheme.","The output type of the commitment.","The type used to initialize a commitment.","A commitment in the random oracle model using SHA256.","","","Check if two commitments are equal.","","Complete the commitment.","","Returns the argument unchanged.","A method to add data to the commitment.","","Calls <code>U::from(self)</code>.","A new commitment initialized with <code>seed</code>.","","The seed used to initialize the commitment.","","","","","The degree, $<code>r</code>$ of a finite field.","The relative degree between two Finite Fields.","The value $<code>n</code>$ from above.","An element of the finite field $\\\\textsf{GF}(2^{128})$ …","The finite field over the prime $<code>P = 2^{128} - 159</code>$.","A field element in the prime-order finite field …","The finite field over the prime $…","The finite field over the prime $<code>M = 2^{19} 3^{26} + 1</code>$. …","The finite field over the prime $…","The finite field over the prime $…","The finite field over the prime $<code>2^{400} - 593</code>$.","An element of the finite field $<code>\\\\textsf{GF}(2^{40})</code>$ …","An element of the finite field $<code>\\\\textsf{GF}(2^{45})</code>$ …","An element of the finite field $<code>\\\\textsf{GF}(2^{56})</code>$ …","A finite field over the Mersenne Prime 2^61 - 1","An element of the finite field $<code>\\\\textsf{GF}(2^{63})</code>$ …","An element of the finite field $<code>\\\\textsf{GF}({2^{64}})</code>$ …","The BLS12-381 finite field.","The BN-254 finite field.","Types that implement this trait are finite fields.","The generator for the multiplicative group.","Denotes that <code>Self</code> is a subfield of <code>FE</code>.","The number of bits in the bit decomposition of any element …","The prime-order subfield of the finite field.","A <code>PrimeFiniteField</code> is a <code>FiniteField</code> with a prime modulus. …","A GF(2) extension field such that:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decompose the given field element into bits.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decompose <code>self</code> into an array of <code>T</code> elements where <code>T</code> is a …","Turn <code>FE</code> into an array of <code>Self</code>, a subfield of <code>FE</codearious number theoretic utility functions used in the …","","","","","","","","","","","","","","","","","Homomorphically lift an array of <code>Self</code> into an <code>FE</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Produce a field element of <code>Self</code> by zeroing the upper bits …","","","","","","Create a field element from an array of subfield <code>T</code> …","","","","","","","","This has a 2^-61 probability of being a biased draw.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Compute the multiplicative inverse of selfhis module defines polynomials (and their operations) …","Multiplication over field elements should be reduced over …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This uniformly generates a field element either 0 or 1 for …","","","","","","","This has a 2^-61 probability of being a biased draw.","","","","","","","","","","Reduce the result of a single 128-bit carryless multiply …","","","","","Reduce the result of several 128-bit carryless multiply …","Reduce the result of several 128-bit carryless multiply …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the canonical byte representation (byte …","","","","","","","","Return the canonical byte representation (byte …","Return the canonical byte representation (byte …","Return the canonical byte representation (byte …","Return the canonical byte representation (byte …","Return the canonical byte representation (byte …","Return the canonical byte representation (byte …","Return the canonical byte representation (byte …","Return the canonical byte representation (byte …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This trait indicates that a finite field is suitable for …","Largest integer <code>p</code> such that <code>phi(MODULUS) = N^p * k</code> for …","Compute the 2-radix FFT of <code>a_coef</code> in the <em>Zp</em> field defined …","Compute the in-place 2-radix FFT of <code>a_coef</code> in the <em>Zp</em> field …","Inverse FFT for <code>fft2</code>.","Inverse FFT for <code>fft2_in_place</code>.","Compute the 3-radix FFT of <code>a_coef</code> in the <em>Zp</em> field defined …","Compute the 3-radix FFT of <code>a_coef</code> in the <em>Zp</em> field defined …","Inverse FFT for <code>fft3</code>.","Inverse FFT for <code>fft3</code>.","Performs a Lagrange interpolation at the origin for a …","For each <code>p</code> such that <code>N^p | phi(MODULUS)</code>, there is a <code>(N^p)</code>…","A polynomial in Newton polynomial form.","A polynomial over some given finite field, represented as …","","Compute the Newton basis polynomial on <code>point</code>.","","","","","","","","","The coefficients for $<code>x^1, ..., x^n</code>$","Return the polynomial <code>P(x) = c</code>","The coefficient for $<code>x^0</code>$","","Return the degree of the polynomial","Return <code>(self / divisor, self % divisor)</code>","","Evaluate the polynomial at a given <code>x</code> value.","Evaluate the Newton polynomial with <code>coefficients</code> on <code>point</code>.","Evaluate the Newton polynomial given a pre-computed basis …","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Interpolate a polynomial from the given <code>(x,y)</code> points","Given <code>values</code>, find the coefficients for the Newton …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Compute the Lagrange coefficient $<code>ℓᵤ(e)</code>$ specified by …","Compute the Lagrange coefficient denominator.","Compute the Lagrange coefficient numerator.","","","Construct a base Newton polynomial.","Return the polynomial <code>P(x) = 1</code>","Construct a random polynomial of the given degree.","","","","","","","","","","","","Return the polynomial <code>P(x) = x</code>","Return the zero polynomial.","A marker type denoting that <code>Self</code> corresponds to an …","A <code>GenericArray</code> of length <code>N</code> containing type <code>T</code>","The underlying <code>ArrayLength</code>, which should always equal <code>Self</code>","Types that implement this trait are finite rings.","Indicates that <code>Self</code> is a sub ring of <code>R</code>.","The multiplicative identity element.","The additive identity element.","Construct an element from the given uniformly chosen …","Compute <code>self</code> to the power of <code>n</code>.","Compute <code>self</code> to the power of <code>n</code>, where <code>n</code> is guaranteed to …","Compute <code>self</code> to the power of <code>n</code>, <strong>in non-constant time</strong>.","Generate a random element.","Generate a random non-zero element.","The error which occurs if the inputted value or bit …","An element deserializer that uses the element’s […","An element serializer that uses the element’s […","The number of bytes in the byte representation for this …","An error with no inhabitants, for when an element cannot …","Types that implement this trait have a canonical …","A way to deserialize field elements of this type.","The error that can result from trying to decode an invalid …","A way to deserialize a sequence of elements.","A way to serialize a sequence of elements.","A way to serialize field elements of this type.","","","","","","","","","","","","","This <em>must</em> be called to flush all outstanding elements.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize an element from a byte array.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Construct a new serializer","Construct a new deserializer","","","","","Read the next serialized element.","","Provides <code>serde</code> serialize / deserialize functionality for …","The exact number of bytes that will be written if <code>n</code> …","","Serialize an element into a byte array.","","","","","","","","","","","","","","","","","","","","","Write a new element.","","Deserializes a vector of elements using <code>serde</code>.","Serializes a vector of elements using <code>serde</code>.","AND two byte arrays, outputting the result.","AND two byte arrays in place.","Pack a bit slice into bytes.","Unpack a bit vector from a slice of bytes.","XOR two byte arrays, outputting the result.","XOR two byte arrays in place.","XOR two byte arrays up to <code>n</code> bytes in place.","XOR two byte arrays up to <code>n</code> bytes, outputting the result."],"i":[2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,2,3,2,3,2,3,10,2,2,2,3,2,3,0,7,8,9,2,3,5,10,7,8,9,2,3,5,10,5,7,0,2,8,9,2,3,5,10,8,9,2,3,5,10,2,3,0,0,2,7,2,3,10,2,3,8,9,9,8,2,3,0,10,2,2,2,3,3,5,10,10,7,8,9,2,2,2,2,3,3,3,5,10,10,10,0,2,3,2,7,8,9,2,3,5,10,2,3,2,7,8,9,5,10,10,10,2,3,3,3,0,10,10,0,5,5,0,2,3,2,7,7,8,9,2,3,5,10,2,3,0,2,3,2,3,10,7,8,9,2,3,3,5,10,2,7,8,9,2,3,5,10,7,8,9,2,3,5,10,0,0,7,8,9,2,3,5,10,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,0,0,0,0,0,0,36,37,33,38,39,36,37,33,38,39,33,32,36,37,33,38,39,36,32,36,37,33,38,39,36,37,33,38,39,36,37,33,38,39,33,33,33,33,36,37,33,38,39,32,32,32,32,32,36,37,33,38,39,32,32,32,32,32,32,32,32,37,38,33,33,0,36,37,33,38,39,36,37,33,38,39,36,37,33,38,39,0,36,37,33,38,39,32,32,32,32,36,37,33,38,39,32,32,32,32,32,32,32,37,38,47,0,47,47,47,47,47,47,47,47,0,0,47,47,47,47,47,88,0,89,89,0,49,49,89,49,89,49,49,89,49,49,89,49,49,49,49,49,49,0,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,67,67,0,0,50,50,50,50,51,51,51,51,52,52,52,52,53,53,53,53,54,54,54,54,55,55,55,55,56,56,56,56,57,57,57,57,58,58,58,58,59,59,59,59,60,60,60,60,61,61,61,61,62,62,62,62,63,63,63,63,64,64,64,64,65,65,65,65,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,67,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,50,50,50,50,50,50,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,50,50,50,51,51,51,51,52,52,52,52,53,53,53,53,54,54,54,54,55,55,55,55,56,56,56,56,57,57,57,57,58,58,58,58,59,59,59,59,60,60,60,60,61,61,61,61,62,62,62,62,63,63,63,63,64,64,64,64,65,65,65,65,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,0,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,50,50,50,50,50,50,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,50,51,51,52,52,52,53,53,54,54,55,55,56,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,90,53,54,55,56,65,67,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,50,50,50,50,50,50,50,50,50,51,51,51,51,52,52,52,52,53,53,53,53,54,54,54,54,55,55,55,55,56,56,56,56,57,57,57,57,58,58,58,58,59,59,59,59,60,60,60,60,61,61,61,61,62,62,62,62,63,63,63,63,64,64,64,64,65,65,65,65,65,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,0,67,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,90,53,54,55,56,90,90,53,65,65,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,50,50,50,51,51,51,51,52,52,52,52,53,53,53,53,54,54,54,54,55,55,55,55,56,56,56,56,57,57,57,57,58,58,58,58,59,59,59,59,60,60,60,60,61,61,61,61,62,62,62,62,63,63,63,63,64,64,64,64,65,65,65,65,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,50,50,51,52,53,54,55,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,0,80,0,0,0,0,0,0,0,0,0,80,0,0,77,81,77,81,77,81,77,81,77,81,77,77,77,77,77,77,77,77,81,81,77,81,77,77,81,77,77,77,81,77,81,0,0,0,77,77,81,77,77,77,77,81,77,81,77,81,77,81,77,81,77,77,0,0,91,0,0,92,92,92,92,92,92,92,92,0,0,0,41,0,0,41,41,0,0,41,85,86,75,84,85,86,75,84,75,84,75,84,93,85,75,75,84,84,85,86,75,84,41,85,86,75,84,93,94,85,86,75,84,94,86,0,93,85,41,75,84,75,84,85,86,75,84,85,86,75,84,85,86,75,84,85,86,75,84,93,85,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[2],[3],[[],1],[[],1],[2],[3],[[],4],[[2,2],2],[[2,2]],[[2,2]],[[3,3],3],[[2,2]],[[3,3]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,6],[[7,2,2],2],0,[[2,2]],[8,8],[9,9],[2,2],[3,3],[5,5],[10,10],[[]],[[]],[[]],[[]],[[]],[[]],[[2,2],11],[[3,3],11],0,0,[[2,2,12],2],[[7,2,2],2],[[],2],[[],3],[[],10],[[],[[13,[2]]]],[[],[[13,[3]]]],[[8,2],2],[[9,2],2],[9],[8],[[2,2],14],[[3,3],14],0,[10],[2,2],[[2,15],16],[[2,15],16],[[3,15],16],[[3,15],16],[[5,15],16],[[10,15],16],[10,10],[[]],[[]],[[]],[[],2],[17,2],[18,2],[[]],[[],3],[[],3],[[]],[[]],[[]],[4,[[13,[10,19]]]],[[],10],0,[2],[3],[[18,20],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[[],14],[2,14],[2,7],[2,8],[[],9],[6,5],[[],10],[10,6],[10,21],[[2,2],[[22,[11]]]],[[3,3],[[22,[11]]]],[[3,23]],[[3,23]],0,[10],[10],0,[[5,10]],[[5,10]],0,[[2,24],13],[3,13],[2,2],[[7,2,2],2],[[7,2]],[[]],[[]],[[]],[[]],[[]],[[]],[[],25],[[],25],[[]],[[],[[13,[1,26]]]],[[],[[13,[1,26]]]],[[],[[13,[1,26]]]],[[],[[13,[1,26]]]],[10,[[13,[19]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],[[13,[3]]]],[[],13],[[],13],[[],[[22,[2]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[28,[[30,[29]]]],[23,23],[28],[[]],[[]],[31,31],[31,23],[28,14],[[28,28],14],[[28,15],16],[[]],[[23,23],28],[28],[[]],[28,23],[[23,23],28],[28,23],[[28,28],[[22,[11]]]],[[],13],[[],13],[[],27],[[]],[[31,23],28],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[33,[32]]]],[[]],[[[36,[34,35]]],[[36,[34,35]]]],[[[37,[34,35]]],[[37,[34,35]]]],[[[33,[32]]],[[33,[32]]]],[[[38,[34,35]]],[[38,[34,35]]]],[[[39,[[0,[34,35]]]]],[[39,[[0,[34,35]]]]]],[[[36,[34,35]]]],[[],40],[[[36,[34,35]]],40],[[[37,[34,35]]],40],[[[33,[32]]],40],[[[38,[34,35]]],40],[[[39,[[0,[34,35]]]]],40],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[33,[32]]],31],[[[33,[32]]],31],[[[33,[32]]],31],[[[33,[32]]],31],[[34,35],[[36,[34,35]]]],[[34,35],[[37,[34,35]]]],[32,[[33,[32]]]],[[34,35],[[38,[34,35]]]],[[[0,[34,35]]],[[39,[[0,[34,35]]]]]],[[],[[40,[2]]]],[[],[[40,[3]]]],[23,[[40,[[30,[2]]]]]],[[],[[40,[14]]]],[[],40],[[[36,[34,35]]],40],[[[37,[34,35]]],40],[[[33,[32]]],40],[[[38,[34,35]]],40],[[[39,[[0,[34,35]]]]],40],[[],[[40,[20]]]],[[],[[40,[41]]]],[[],[[40,[42]]]],[[],[[40,[6]]]],[[],[[40,[21]]]],[[],[[40,[29]]]],[[],[[40,[23]]]],[23,[[40,[[30,[29]]]]]],[[[37,[34,35]]],[[44,[[43,[34]]]]]],[[[38,[34,35]]],[[46,[[45,[34]]]]]],[[[33,[32]]],31],[[[33,[32]]],31],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],27],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],[[]],[[]],[2,40],[3,40],[14,40],[[],40],[[[36,[34,35]]],40],[[[37,[34,35]]],40],[[[33,[32]]],40],[[[38,[34,35]]],40],[[[39,[[0,[34,35]]]]],40],[20,40],[[],40],[42,40],[6,40],[21,40],[29,40],[23,40],[[[37,[34,35]]],[[44,[[43,[35]]]]]],[[[38,[34,35]]],[[46,[[45,[35]]]]]],0,0,0,[[]],[[]],[[47,15],16],[[47,15],16],[48,47],[[]],[[]],[[],[[13,[[30,[2]],47]]]],[[],[[13,[[30,[2]],47]]]],[[],25],[[],13],[[],13],[[],27],[[]],0,0,0,0,0,[[]],[[]],[[],14],[[],14],[[]],[49],[[]],[[]],[49],[[]],[[]],[[],49],0,[[],13],[[],13],[[],27],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[50,50]],[[50,50]],[[50,50]],[[50,50]],[[51,51]],[[51,51]],[[51,51]],[[51,51]],[[52,52]],[[52,52]],[[52,52]],[[52,52]],[[53,53]],[[53,53]],[[53,53]],[[53,53]],[[54,54]],[[54,54]],[[54,54]],[[54,54]],[[55,55]],[[55,55]],[[55,55]],[[55,55]],[[56,56]],[[56,56]],[[56,56]],[[56,56]],[[57,57]],[[57,57]],[[57,57]],[[57,57]],[[58,58]],[[58,58]],[[58,58]],[[58,58]],[[59,59]],[[59,59]],[[59,59]],[[59,59]],[[60,60]],[[60,60]],[[60,60]],[[60,60]],[[61,61]],[[61,61]],[[61,61]],[[61,61]],[[62,62]],[[62,62]],[[62,62]],[[62,62]],[[63,63]],[[63,63]],[[63,63]],[[63,63]],[[64,64]],[[64,64]],[[64,64]],[[64,64]],[[65,65]],[[65,65]],[[65,65]],[[65,65]],[[50,50]],[[50,50]],[[51,51]],[[51,51]],[[52,52]],[[52,52]],[[53,53]],[[53,53]],[[54,54]],[[54,54]],[[55,55]],[[55,55]],[[56,56]],[[56,56]],[[57,57]],[[57,57]],[[58,58]],[[58,58]],[[59,59]],[[59,59]],[[60,60]],[[60,60]],[[61,61]],[[61,61]],[[62,62]],[[62,62]],[[63,63]],[[63,63]],[[64,64]],[[64,64]],[[65,65]],[[65,65]],[[],[[66,[14]]]],[50,[[66,[14]]]],[51,[[66,[14]]]],[52,[[66,[14]]]],[53,[[66,[14]]]],[54,[[66,[14]]]],[55,[[66,[14]]]],[56,[[66,[14]]]],[57,[[66,[14]]]],[58,[[66,[14]]]],[59,[[66,[14]]]],[60,[[66,[14]]]],[61,[[66,[14]]]],[62,[[66,[14]]]],[63,[[66,[14]]]],[64,[[66,[14]]]],[65,[[66,[14]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[50,50,12],50],[[51,51,12],51],[[52,52,12],52],[[53,53,12],53],[[54,54,12],54],[[55,55,12],55],[[56,56,12],56],[[57,57,12],57],[[58,58,12],58],[[59,59,12],59],[[60,60,12],60],[[61,61,12],61],[[62,62,12],62],[[63,63,12],63],[[64,64,12],64],[[65,65,12],65],[[50,50],12],[[51,51],12],[[52,52],12],[[53,53],12],[[54,54],12],[[55,55],12],[[56,56],12],[[57,57],12],[[58,58],12],[[59,59],12],[[60,60],12],[[61,61],12],[[62,62],12],[[63,63],12],[[64,64],12],[[65,65],12],[[],[[66,[[0,[67,68]],[69,[[0,[67,68]]]]]]]],[[],66],[53,[[66,[50,70]]]],[54,[[66,[50,71]]]],[52,[[66,[50]]]],[51,[[66,[50]]]],[56,[[66,[50,72]]]],[55,[[66,[50,73]]]],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],50],[[],51],[[],52],[[],53],[[],54],[[],55],[[],56],[[],57],[[],58],[[],59],[[],60],[[],61],[[],62],[[],63],[[],64],[[],65],[74,[[13,[50]]]],[74,[[13,[51]]]],[74,[[13,[52]]]],[74,[[13,[53]]]],[74,[[13,[54]]]],[74,[[13,[55]]]],[74,[[13,[56]]]],[74,[[13,[57]]]],[74,[[13,[58]]]],[74,[[13,[59]]]],[74,[[13,[60]]]],[74,[[13,[61]]]],[74,[[13,[62]]]],[74,[[13,[63]]]],[74,[[13,[64]]]],[74,[[13,[65]]]],[[50,50]],[[50,50]],[[50,50]],[[50,50]],[[51,51]],[[51,51]],[[51,51]],[[51,51]],[[52,52]],[[52,52]],[[52,52]],[[52,52]],[[53,53]],[[53,53]],[[53,53]],[[53,53]],[[54,54]],[[54,54]],[[54,54]],[[54,54]],[[55,55]],[[55,55]],[[55,55]],[[55,55]],[[56,56]],[[56,56]],[[56,56]],[[56,56]],[[57,57]],[[57,57]],[[57,57]],[[57,57]],[[58,58]],[[58,58]],[[58,58]],[[58,58]],[[59,59]],[[59,59]],[[59,59]],[[59,59]],[[60,60]],[[60,60]],[[60,60]],[[60,60]],[[61,61]],[[61,61]],[[61,61]],[[61,61]],[[62,62]],[[62,62]],[[62,62]],[[62,62]],[[63,63]],[[63,63]],[[63,63]],[[63,63]],[[64,64]],[[64,64]],[[64,64]],[[64,64]],[[65,65]],[[65,65]],[[65,65]],[[65,65]],[[50,50]],[[50,50]],[[51,51]],[[51,51]],[[52,52]],[[52,52]],[[53,53]],[[53,53]],[[54,54]],[[54,54]],[[55,55]],[[55,55]],[[56,56]],[[56,56]],[[57,57]],[[57,57]],[[58,58]],[[58,58]],[[59,59]],[[59,59]],[[60,60]],[[60,60]],[[61,61]],[[61,61]],[[62,62]],[[62,62]],[[63,63]],[[63,63]],[[64,64]],[[64,64]],[[65,65]],[[65,65]],[[50,50],14],[[51,51],14],[[52,52],14],[[53,53],14],[[54,54],14],[[55,55],14],[[56,56],14],[[57,57],14],[[58,58],14],[[59,59],14],[[60,60],14],[[61,61],14],[[62,62],14],[[63,63],14],[[64,64],14],[[65,65],14],0,[[50,15],16],[[51,15],16],[[52,15],16],[[53,15],16],[[54,15],16],[[55,15],16],[[56,15],16],[[57,15],16],[[58,15],16],[[59,15],16],[[60,15],16],[[61,15],16],[[62,15],16],[[63,15],16],[[64,15],16],[[65,15],16],[66],[66,53],[66,51],[66,52],[66],[66,56],[66,55],[66,54],[66],[66],[66],[66],[66],[66],[66],[66],[66],[66],[66],[66],[66],[66],[66],[14,50],[[]],[[]],[50,51],[21,52],[50,52],[[]],[50,53],[[]],[50,54],[[]],[50,55],[[]],[[]],[50,56],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[66,[[13,[50,75]]]],[66,[[13,[51]]]],[66,[[13,[52]]]],[66,[[13,[53]]]],[66,[[13,[54]]]],[66,[[13,[55]]]],[66,[[13,[56]]]],[66,[[13,[57]]]],[66,[[13,[58,75]]]],[66,[[13,[59,75]]]],[66,[[13,[60,75]]]],[66,[[13,[61,75]]]],[66,[[13,[62,75]]]],[66,[[13,[63,75]]]],[66,[[13,[64,75]]]],[66,[[13,[65,75]]]],[21],[21,53],[21,54],[21,55],[21,56],[[76,6],[[13,[65]]]],[66],[[],50],[[],51],[[],52],[[],53],[[],54],[[],55],[[],56],[[],57],[[],58],[[],59],[[],60],[[],61],[[],62],[[],63],[[],64],[[],65],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[50,14],[51,14],[52,14],[53,14],[54,14],[55,14],[56,14],[57,14],[58,14],[59,14],[60,14],[61,14],[62,14],[63,14],[64,14],[65,14],[50,14],[51,14],[52,14],[53,14],[54,14],[55,14],[56,14],[57,14],[58,14],[59,14],[60,14],[61,14],[62,14],[63,14],[64,14],[65,14],[[50,50]],[[50,52],52],[[50,55],55],[[50,51],51],[[50,54],54],[[50,50]],[[50,50]],[[50,50]],[[50,53],53],[[50,56],56],[[51,51]],[[51,51]],[[51,51]],[[51,51]],[[52,52]],[[52,52]],[[52,52]],[[52,52]],[[53,53]],[[53,53]],[[53,53]],[[53,53]],[[54,54]],[[54,54]],[[54,54]],[[54,54]],[[55,55]],[[55,55]],[[55,55]],[[55,55]],[[56,56]],[[56,56]],[[56,56]],[[56,56]],[[57,57]],[[57,57]],[[57,57]],[[57,57]],[[58,58]],[[58,58]],[[58,58]],[[58,58]],[[59,59]],[[59,59]],[[59,59]],[[59,59]],[[60,60]],[[60,60]],[[60,60]],[[60,60]],[[61,61]],[[61,61]],[[61,61]],[[61,61]],[[62,62]],[[62,62]],[[62,62]],[[62,62]],[[63,63]],[[63,63]],[[63,63]],[[63,63]],[[64,64]],[[64,64]],[[64,64]],[[64,64]],[[65,65]],[[65,65]],[[65,65]],[[65,65]],[[65,65,65]],[[50,50]],[[50,50]],[[51,51]],[[51,51]],[[52,52]],[[52,52]],[[53,53]],[[53,53]],[[54,54]],[[54,54]],[[55,55]],[[55,55]],[[56,56]],[[56,56]],[[57,57]],[[57,57]],[[58,58]],[[58,58]],[[59,59]],[[59,59]],[[60,60]],[[60,60]],[[61,61]],[[61,61]],[[62,62]],[[62,62]],[[63,63]],[[63,63]],[[64,64]],[[64,64]],[[65,65]],[[65,65]],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[[],50],[[],51],[[],52],[[],53],[[],54],[[],55],[[],56],[[],57],[[],58],[[],59],[[],60],[[],61],[[],62],[[],63],[[],64],[[],65],0,[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[78,50],[78,51],[78,52],[78,53],[78,54],[78,55],[78,56],[78,57],[78,58],[78,59],[78,60],[78,61],[78,62],[78,63],[78,64],[78,65],[[],50],[[],51],[[],52],[[],53],[[],54],[[],55],[[],56],[[],57],[[],58],[[],59],[[],60],[[],61],[[],62],[[],63],[[],64],[[],65],[[],50],[79],[79,53],[79,54],[79,55],[79,56],[[]],[[]],[[]],[[65,65],65],[23,65],[23,65],[[50,24],13],[[51,24],13],[[52,24],13],[[53,24],13],[[54,24],13],[[55,24],13],[[56,24],13],[[57,24],13],[[58,24],13],[[59,24],13],[[60,24],13],[[61,24],13],[[62,24],13],[[63,24],13],[[64,24],13],[[65,24],13],[[50,50]],[[50,50]],[[50,50]],[[50,50]],[[51,51]],[[51,51]],[[51,51]],[[51,51]],[[52,52]],[[52,52]],[[52,52]],[[52,52]],[[53,53]],[[53,53]],[[53,53]],[[53,53]],[[54,54]],[[54,54]],[[54,54]],[[54,54]],[[55,55]],[[55,55]],[[55,55]],[[55,55]],[[56,56]],[[56,56]],[[56,56]],[[56,56]],[[57,57]],[[57,57]],[[57,57]],[[57,57]],[[58,58]],[[58,58]],[[58,58]],[[58,58]],[[59,59]],[[59,59]],[[59,59]],[[59,59]],[[60,60]],[[60,60]],[[60,60]],[[60,60]],[[61,61]],[[61,61]],[[61,61]],[[61,61]],[[62,62]],[[62,62]],[[62,62]],[[62,62]],[[63,63]],[[63,63]],[[63,63]],[[63,63]],[[64,64]],[[64,64]],[[64,64]],[[64,64]],[[65,65]],[[65,65]],[[65,65]],[[65,65]],[[50,50]],[[50,50]],[[51,51]],[[51,51]],[[52,52]],[[52,52]],[[53,53]],[[53,53]],[[54,54]],[[54,54]],[[55,55]],[[55,55]],[[56,56]],[[56,56]],[[57,57]],[[57,57]],[[58,58]],[[58,58]],[[59,59]],[[59,59]],[[60,60]],[[60,60]],[[61,61]],[[61,61]],[[62,62]],[[62,62]],[[63,63]],[[63,63]],[[64,64]],[[64,64]],[[65,65]],[[65,65]],[78,50],[78,51],[78,52],[78,53],[78,54],[78,55],[78,56],[78,57],[78,58],[78,59],[78,60],[78,61],[78,62],[78,63],[78,64],[78,65],[50,[[66,[29]]]],[51,[[66,[29]]]],[52,[[66,[29]]]],[53,[[66,[29]]]],[54,[[66,[29]]]],[55,[[66,[29]]]],[56,[[66,[29]]]],[57,[[66,[29]]]],[58,[[66,[29]]]],[59,[[66,[29]]]],[60,[[66,[29]]]],[61,[[66,[29]]]],[62,[[66,[29]]]],[63,[[66,[29]]]],[64,[[66,[29]]]],[65,[[66,[29]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[29,[[13,[50]]]],[18,[[13,[50]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[18,[[13,[57]]]],[[],13],[[],13],[18,[[13,[58]]]],[18,[[13,[59]]]],[[],13],[[],13],[18,[[13,[60]]]],[[],13],[18,[[13,[61]]]],[18,[[13,[62]]]],[[],13],[18,[[13,[63]]]],[[],13],[18,[[13,[64]]]],[[],13],[18,[[13,[65]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],50],[[],51],[[],52],[[],53],[[],54],[[],55],[[],56],[[],57],[[],58],[[],59],[[],60],[[],61],[[],62],[[],63],[[],64],[[],65],0,0,[80,[[30,[80]]]],[80],[80,[[30,[80]]]],[80],[80,[[30,[80]]]],[80],[80,[[30,[80]]]],[80],[[]],[23],0,0,[[[77,[67]],77]],[[[81,[67]],67,30]],[[]],[[]],[[]],[[]],[[[77,[[0,[82,67]]]]],[[77,[[0,[82,67]]]]]],[[[81,[[0,[82,67]]]]],[[81,[[0,[82,67]]]]]],[[]],[[]],0,[67,[[77,[67]]]],0,[[[77,[67]],[77,[67]]],12],[[[77,[67]]],23],[[[77,[67]],[77,[67]]]],[[[77,[67]],[77,[67]]],14],[[[77,[67]],67],67],[[[81,[67]],67],67],[[[81,[67]]],67],[[[77,[67]],15],16],[[[81,[[0,[83,67]]]],15],16],[[]],[[],[[77,[67]]]],[[]],[[[77,[67]],23]],[[[77,[67]],23]],[[],[[77,[67]]]],[[[81,[67]]]],[[]],[[]],[[67,67],67],[67,67],[[67,67],67],[[[77,[67]],77]],[[[77,[67]],67]],[[[30,[67]]],[[81,[67]]]],[[],[[77,[67]]]],[23,[[77,[67]]]],[[[77,[67]],77]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],27],[[],27],[[]],[[]],[[],[[77,[67]]]],[[],[[77,[67]]]],0,0,0,0,0,0,0,[[]],[18],[[18,42]],[18],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[75,75],[84,84],[[]],[[]],[[],40],[[[85,[41]]],40],[[75,15],16],[[75,15],16],[[84,15],16],[[84,15],16],[[]],[[]],[[]],[[]],[66,13],[[]],[[]],[[]],[[]],[[],40],[[],40],[[],[[40,[[85,[41]]]]]],[[],[[40,[[86,[41]]]]]],[87],[87],[[],40],[[[86,[41]]],[[40,[41]]]],0,[23,23],[23,23],[[],[[66,[29]]]],[[]],[[]],[[],25],[[],25],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],[[],40],[[[85,[41]],41],40],[74,[[13,[[30,[41]]]]]],[24,13],[[],[[30,[29]]]],[[]],[[],[[30,[29]]]],[23,[[30,[14]]]],[[],[[30,[29]]]],[[]],[23],[23,[[30,[29]]]]],"p":[[3,"BitSlice"],[3,"Block"],[3,"Block512"],[8,"RngCore"],[3,"UniformIntegersUnderBound"],[15,"u32"],[3,"AesHash"],[3,"Aes128"],[3,"Aes256"],[3,"AesRng"],[4,"Ordering"],[3,"Choice"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"U8x16"],[15,"u128"],[3,"Error"],[3,"RistrettoPoint"],[15,"u64"],[4,"Option"],[15,"usize"],[8,"Serializer"],[3,"String"],[4,"BitSpanError"],[3,"TypeId"],[3,"BloomFilter"],[15,"u8"],[3,"Vec"],[15,"f64"],[8,"AbstractChannel"],[3,"TrackChannel"],[8,"Read"],[8,"Write"],[3,"HashChannel"],[3,"SyncChannel"],[3,"Channel"],[3,"SymChannel"],[6,"Result"],[8,"CanonicalSerialize"],[15,"u16"],[3,"Mutex"],[3,"Arc"],[3,"RefCell"],[3,"Rc"],[4,"Error"],[3,"Error"],[3,"ShaCommitment"],[3,"F2"],[3,"F128b"],[3,"F64b"],[3,"F63b"],[3,"F56b"],[3,"F40b"],[3,"F45b"],[3,"F61p"],[3,"F384p"],[3,"F384q"],[3,"F128p"],[3,"F256p"],[3,"Fbls12381"],[3,"Fbn254"],[3,"F400p"],[3,"F2e19x3e26"],[3,"GenericArray"],[8,"FiniteField"],[8,"IsSubFieldOf"],[6,"DegreeModulo"],[6,"U63"],[6,"U56"],[6,"U45"],[6,"U40"],[8,"Deserializer"],[3,"BiggerThanModulus"],[15,"str"],[3,"Polynomial"],[8,"Iterator"],[3,"U64x2"],[8,"FieldForFFT"],[3,"NewtonPolynomial"],[8,"Clone"],[8,"Debug"],[4,"BytesDeserializationCannotFail"],[3,"ByteElementSerializer"],[3,"ByteElementDeserializer"],[3,"Demand"],[13,"IoError"],[8,"Commitment"],[8,"SmallBinaryField"],[8,"AnyArrayLength"],[8,"FiniteRing"],[8,"SequenceSerializer"],[8,"SequenceDeserializer"]]},\
"simple_arith_circuit":{"doc":"Implementation of a very simple (flat) arithmetic circuit …","t":[13,3,13,13,13,4,13,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,5,5,5,5,5,5,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["Add","Circuit","Constant","Copy","Mul","Op","Sub","borrow","borrow","borrow_mut","borrow_mut","builder","circuitgen","clone","clone","clone_into","clone_into","deref","deserialize","deserialize","eval","fmt","fmt","from","from","into","into","new","ninputs","nmuls","nnonmuls","noutputs","nwires","read_bristol_fashion","reader","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","0","0","0","1","1","1","add_binary_equality_check","add_equality_check","mul_zero_circuit","random_binary_zero_circuit","random_circuit","random_zero_circuit","DebugInfo","Error","IoError","ParseIntError","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","fmt","fmt","from","from","from","from","into","into","mapping","meta","provide","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0"],"q":["simple_arith_circuit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","simple_arith_circuit::Op","","","","","","","","simple_arith_circuit::builder","","simple_arith_circuit::circuitgen","","","","simple_arith_circuit::reader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","simple_arith_circuit::reader::Error",""],"d":["Add two elements","The circuit, represented as a vector of <code>Op</code>s.","Load a constant value","Copy an element","Multiply two elements","Gate operations, where the operation arguments correspond …","Subtract the first element from the second","","","","","This module implements functions for building / extending …","This module implements helper functions for generating …","","","","","","","","Evaluates a circuit on an input, returning the output …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>Circuit</code> with <code>ninputs</code> input wires, <code>noutputs</code> …","Returns the number of inputs.","Returns the number of multiplication gates.","Returns the number of non-multiplication gates.","Returns the number of outputs.","Returns the number of wires. This is equal to the number …","Generate a new <code>Circuit</code> from the Bristol Fashion file …","This module implements a reader for “Bristol Fashion” …","","","","","","","","","","","","","","","","","","","","","Adds an equality check to binary <code>circuit</code> such that the new …","Adds an equality check to <code>circuit</code> such that the new circuit","Output a circuit evaluating to zero that’s just multiply …","Output a random <em>binary</em> circuit with an input that …","Output a random circuit.","Output a random circuit with an input that evaluates to …","Specifies what debug information …","Errors produced by <code>Circuit::read_bristol_fashion</code>.","Input/output error.","Integer parsing error.","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Show mappings used to construct circuit.","Show brief info about the circuit.","","","","","","","","","","","","",""],"i":[3,0,3,3,3,0,3,3,4,3,4,0,0,3,4,3,4,4,3,4,4,3,4,3,4,3,4,4,4,4,4,4,4,4,0,3,4,3,4,3,4,3,4,3,4,3,4,21,22,23,24,25,21,22,23,0,0,0,0,0,0,0,0,15,15,12,15,12,15,12,12,12,15,15,12,15,15,15,12,15,12,12,15,12,15,12,15,12,15,12,15,12,15,26,27],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[]],[[]],[[[4,[2]]]],[[],[[5,[[3,[2]]]]]],[[],[[5,[[4,[2]]]]]],[[[4,[2]],6]],[[[3,[[0,[7,2]]]],8],9],[[[4,[[0,[7,2]]]],8],9],[[]],[[]],[[]],[[]],[[10,10,[6,[[3,[2]]]]],[[4,[2]]]],[[[4,[2]]],10],[[[4,[2]]],10],[[[4,[2]]],10],[[[4,[2]]],10],[[[4,[2]]],10],[[11,[13,[12]]],[[5,[[4,[14]],15]]]],0,[[[3,[2]]],5],[[[4,[2]]],5],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],16],[[],16],[[]],[[]],0,0,0,0,0,0,0,0,[[[4,[14]]],[[4,[14]]]],[[[4,[2]],2],[[4,[2]]]],[[10,10]],[[10,10,10]],[[10,10,10]],[[10,10]],0,0,0,0,[[]],[[]],[[]],[[]],[12,12],[[]],[[],12],[[15,8],9],[[15,8],9],[[]],[17,15],[18,15],[[]],[[]],[[]],0,0,[19],[[]],[[],20],[[],5],[[],5],[[],5],[[],5],[[],16],[[],16],[[]],[[]],0,0],"p":[[8,"Clone"],[8,"FiniteField"],[4,"Op"],[3,"Circuit"],[4,"Result"],[3,"Vec"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"usize"],[3,"Path"],[3,"DebugInfo"],[4,"Option"],[3,"F2"],[4,"Error"],[3,"TypeId"],[3,"Error"],[3,"ParseIntError"],[3,"Demand"],[3,"String"],[13,"Add"],[13,"Mul"],[13,"Sub"],[13,"Constant"],[13,"Copy"],[13,"ParseIntError"],[13,"IoError"]]},\
"vectoreyes":{"doc":"VectorEyes is a (almost entirely) safe wrapper library …","t":[3,3,3,3,8,8,13,13,13,16,13,18,16,13,16,8,18,8,3,3,3,3,3,3,3,3,16,18,4,16,16,16,16,8,13,16,16,16,6,8,8,8,8,8,8,8,8,13,13,3,3,3,3,3,3,3,3,13,16,16,17,16,4,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,16,8,8,4,8,16,8,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11],"n":["Aes128","Aes128EncryptOnly","Aes256","Aes256EncryptOnly","AesBlockCipher","AesBlockCipherDecrypt","AmdZenVer1","AmdZenVer2","AmdZenVer3","Array","Avx2","BLOCK_COUNT_HINT","BroadcastLoInput","CascadeLake","EncryptOnly","ExtendingCast","FIXED_KEY","HasVector","I16x16","I16x8","I32x4","I32x8","I64x2","I64x4","I8x16","I8x32","Key","LANES","MicroArchitecture","SameSign16","SameSign32","SameSign64","SameSign8","Scalar","Scalar","Scalar","Signed","Signed","Simd","SimdBase","SimdBase32","SimdBase4x","SimdBase4x64","SimdBase64","SimdBase8","SimdBase8x","SimdBaseGatherable","Skylake","SkylakeAvx512","U16x16","U16x8","U32x4","U32x8","U64x2","U64x4","U8x16","U8x32","Unknown","Unsigned","Unsigned","VECTOR_BACKEND","Vector","VectorBackend","ZERO","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","and_not","and_not","and_not","and_not","and_not","and_not","and_not","and_not","and_not","and_not","and_not","and_not","and_not","and_not","and_not","and_not","and_not","array_utils","as_array","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","blend","blend","blend","blend","blend","blend","blend","blend","blend","blend","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast","broadcast","broadcast","broadcast","broadcast","broadcast","broadcast","broadcast","broadcast","broadcast","broadcast","broadcast","broadcast","broadcast","broadcast","broadcast","broadcast","broadcast_lo","broadcast_lo","broadcast_lo","broadcast_lo","broadcast_lo","broadcast_lo","broadcast_lo","broadcast_lo","broadcast_lo","broadcast_lo","broadcast_lo","broadcast_lo","broadcast_lo","broadcast_lo","broadcast_lo","broadcast_lo","broadcast_lo","carryless_mul","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","ct_eq","decrypt","decrypt_many","decrypt_many","decrypt_many","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","encrypt","encrypt_many","encrypt_many","encrypt_many","encrypt_many","encrypt_many","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extending_cast_from","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","gather","gather","gather","gather","gather","gather","gather","gather","gather","gather","gather","gather","gather","gather","gather","gather","gather","gather","gather","gather_masked","gather_masked","gather_masked","gather_masked","gather_masked","gather_masked","gather_masked","gather_masked","gather_masked","gather_masked","gather_masked","gather_masked","gather_masked","gather_masked","gather_masked","gather_masked","gather_masked","gather_masked","gather_masked","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","max","max","max","max","max","max","max","max","max","max","max","max","max","max","max","max","max","min","min","min","min","min","min","min","min","min","min","min","min","min","min","min","min","min","most_significant_bits","most_significant_bits","most_significant_bits","most_significant_bits","most_significant_bits","mul_lo","mul_lo","mul_lo","mul_lo","mul_lo","new_with_key","new_with_key","new_with_key","new_with_key","new_with_key","set_lo","set_lo","set_lo","set_lo","set_lo","set_lo","set_lo","set_lo","set_lo","set_lo","set_lo","set_lo","set_lo","set_lo","set_lo","set_lo","set_lo","shift_bytes_left","shift_bytes_left","shift_bytes_left","shift_bytes_left","shift_bytes_left","shift_bytes_right","shift_bytes_right","shift_bytes_right","shift_bytes_right","shift_bytes_right","shift_left","shift_left","shift_left","shift_left","shift_left","shift_left","shift_left","shift_left","shift_left","shift_left","shift_left","shift_left","shift_left","shift_left","shift_left","shift_left","shift_left","shift_right","shift_right","shift_right","shift_right","shift_right","shift_right","shift_right","shift_right","shift_right","shift_right","shift_right","shift_right","shift_right","shift_right","shift_right","shift_right","shift_right","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shuffle","shuffle","shuffle","shuffle","shuffle","shuffle","shuffle","shuffle","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpack_hi","unpack_hi","unpack_hi","unpack_hi","unpack_hi","unpack_hi","unpack_hi","unpack_hi","unpack_hi","unpack_hi","unpack_hi","unpack_hi","unpack_hi","unpack_hi","unpack_hi","unpack_hi","unpack_hi","unpack_lo","unpack_lo","unpack_lo","unpack_lo","unpack_lo","unpack_lo","unpack_lo","unpack_lo","unpack_lo","unpack_lo","unpack_lo","unpack_lo","unpack_lo","unpack_lo","unpack_lo","unpack_lo","unpack_lo","micro_architecture","AdjacentPairs","ArrayAdjacentPairs","ArrayUnrolledExt","ArrayUnrolledOps","EvenArrayAdjacentPairs","T","UnrollableArraySize","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_enumerate","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_fold","array_for_each","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_generate","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_map_result","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","array_zip","borrow","borrow_mut","from","into","pair_adjacent","pair_adjacent_maybe_odd","try_from","try_into","type_id"],"q":["vectoreyesvectoreyes::VectorBackend","vectoreyes::array_utilsd":["","","","","","","","","","The equivalent array type of this vector.","","Running <code>encrypt_many</code> with this many blocks will result in …","","","If you don’t need to use Aes for decryption, it’s …","Lossily cast a vector by {zero,sign}-extending its values.","A pre-scheduled Aes block cipher with a compile-time …","A utility trait you probably won’t need to use. See Simd.","<code>[i16; 16]</code> as a vector.","<code>[i16; 8]</code> as a vector.","<code>[i32; 4]</code> as a vector.","<code>[i32; 8]</code> as a vector.","<code>[i64; 2]</code> as a vector.","<code>[i64; 4]</code> as a vector.","<code>[i8; 16]</code> as a vector.","<code>[i8; 32]</code> as a vector.","","The number of elements of this vector.","","A scalar of the same sign as this scalar, but with width …","A scalar of the same sign as this scalar, but with width …","A scalar of the same sign as this scalar, but with width …","A scalar of the same sign as this scalar, but with width 8.","A scalar that can live in the lane of a vector.","","The scalar that this value holds.","A scalar of the same width as this scalar, but signed.","The signed version of this vector.","An alternative way of naming SIMD types.","A vector equivalent to <code>[T; Self::Lanes]</code>.","A vector containing 32-bit values.","A vector containing 4 lanes.","A vector containing 4 64-bit values.","A vector containing 64-bit values.","A vector containing 8-bit values.","A vector containing 8 lanes.","","","","<code>[u16; 16]</code> as a vector.","<code>[u16; 8]</code> as a vector.","<code>[u32; 4]</code> as a vector.","<code>[u32; 8]</code> as a vector.","<code>[u64; 2]</code> as a vector.","<code>[u64; 4]</code> as a vector.","<code>[u8; 16]</code> as a vector.","<code>[u8; 32]</code> as a vector.","","A scalar of the same width as this scalar, but unsigned.","The unsigned version of this vector.","The backend that is used to evaluate vector operations.","","","","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","","","","","","","","","","","","","","","","","Compute <code>self &amp; (! other)</code>.","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Perform manually unrolled operations on arrays.","Convert the vector to an array.","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","","","","","","","","","","","","","","","","","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","","","","","","","","","","","","","","","","","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","","","","","","","","","","","","","","","","","If <code>Bi</code> is true, then that lane will be filled by <code>if_true</code>. …","If <code>Bi</code> is true, then that lane will be filled by <code>if_true</code>. …","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new vector by setting every element to <code>value</code>.","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Create a vector by setting every element to element 0 of <code>of</code>…","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a vector where each element is all 1’s if the …","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Create a vector where each element is all 1’s if the …","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Avx2","Avx2","The zero vector.","The zero vector.","The zero vector.","The zero vector.","The zero vector.","The zero vector.","The zero vector.","The zero vector.","The zero vector.","The zero vector.","The zero vector.","The zero vector.","The zero vector.","The zero vector.","The zero vector.","The zero vector.","","","Avx2","Avx2","Avx2","Avx2","","","","","","","","","","","","","","","","","","","Cast from one vector to another by sign or zero exending …","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Get the <code>I</code>-th element of this vector","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Returns the argument unchanged.","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Avx2","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Avx2","This cast is 100% free. It reinterprets the little-endinan …","Scalar Equivalent:","NOTE: this will <em>zero</em> the upper bits of the destination. …","This cast is 100% free. It reinterprets the little-endinan …","Returns the argument unchanged.","This cast is 100% free. It reinterprets the little-endinan …","Avx2","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Returns the argument unchanged.","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Avx2","Scalar Equivalent:","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Scalar Equivalent:","Returns the argument unchanged.","NOTE: this will <em>zero</em> the upper bits of the destination. …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Returns the argument unchanged.","Avx2","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Avx2","Scalar Equivalent:","NOTE: this will <em>zero</em> the upper bits of the destination. …","Scalar Equivalent:","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Returns the argument unchanged.","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Returns the argument unchanged.","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Avx2","Scalar Equivalent:","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Scalar Equivalent:","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","NOTE: this will <em>zero</em> the upper bits of the destination. …","Returns the argument unchanged.","Avx2","This cast is 100% free. It reinterprets the little-endinan …","Avx2","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Returns the argument unchanged.","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Returns the argument unchanged.","Avx2","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","NOTE: this will <em>zero</em> the upper bits of the destination. …","Scalar Equivalent:","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Avx2","Returns the argument unchanged.","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","NOTE: this will <em>zero</em> the upper bits of the destination. …","Scalar Equivalent:","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Avx2","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Returns the argument unchanged.","Scalar Equivalent:","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Avx2","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Returns the argument unchanged.","This cast is 100% free. It reinterprets the little-endinan …","Returns the argument unchanged.","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Scalar Equivalent:","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Avx2","NOTE: this will <em>zero</em> the upper bits of the destination. …","Scalar Equivalent:","This cast is 100% free. It reinterprets the little-endinan …","Avx2","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Returns the argument unchanged.","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Returns the argument unchanged.","This cast is 100% free. It reinterprets the little-endinan …","Avx2","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","Scalar Equivalent:","This cast is 100% free. It reinterprets the little-endinan …","This cast is 100% free. It reinterprets the little-endinan …","NOTE: this will <em>zero</em> the upper bits of the destination. …","Scalar Equivalent:","Returns the argument unchanged.","Returns the argument unchanged.","Avx2","Returns the argument unchanged.","Returns the argument unchanged.","Avx2","Create a vector from an array.","Create a vector from an array.","Create a vector from an array.","Create a vector from an array.","Create a vector from an array.","Create a vector from an array.","Create a vector from an array.","Create a vector from an array.","Create a vector from an array.","Create a vector from an array.","Create a vector from an array.","Create a vector from an array.","Create a vector from an array.","Create a vector from an array.","Create a vector from an array.","Create a vector from an array.","Construct a vector by accessing values at <code>base + indices[i]</code>","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Construct a vector by accessing values at <code>base + indices[i]</code>…","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Make a vector consisting of the maximum elements of <code>self</code> …","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Make a vector consisting of the minimum elements of <code>self</code> …","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Get the sign/most significant bits of the elements of the …","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Zero out the upper-32 bits of each word, and then perform …","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","If you need to AES with a particular key, be careful about …","Avx2","Avx2","Avx2","Avx2","Create a new vector by setting element 0 to <code>value</code>, and the …","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Shift within 128-bit lanes.","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Shift within 128-bit lanes.","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Shift each element left by <code>BITS</code>.","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Shift each element right by <code>BITS</code>.","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Shuffle within 128-bit lanes.","Shuffle across 128-bit lanes.","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Interleave the elements of the high half of <code>self</code> and <code>other</code>","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Interleave the elements of the low half of <code>self</code> and <code>other</code>","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","Scalar Equivalent:","","An array which is <code>[Self::T; ceil(Self::LEN / 2)]</code>","","Manually unrolled operations on arrays.","A type which can be used to require that unrolled …","An even-sized array.","","A marker trait you probably won’t need to use directly. …","","Produce an array where each element is a tuple containing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fold over an array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Perform some computation over the elements of an array.","","Generate an array by filling the entries.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Map over elements of an array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Map over elements of an array, halting on the first error.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Zip two arrays together.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Turn an array into an array of pairs where each element is …","Turn an array into an array of pairs where each element is …","","",""],"i":[0,0,0,0,0,0,25,25,25,38,26,39,38,25,39,0,39,0,0,0,0,0,0,0,0,0,39,38,0,40,40,40,40,0,26,38,40,38,0,0,0,0,0,0,0,0,0,25,25,0,0,0,0,0,0,0,0,25,40,38,0,41,0,38,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,38,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,38,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,42,43,3,5,6,8,11,13,14,16,25,26,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,27,28,29,30,25,26,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,27,28,29,30,38,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,38,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,15,25,26,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,27,28,29,30,25,26,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,27,28,29,30,38,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,38,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,44,44,27,29,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,39,39,27,28,29,30,25,26,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,45,3,4,5,5,6,6,7,7,7,8,8,8,11,12,13,13,14,14,15,15,15,16,16,16,38,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,25,26,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,27,28,29,30,25,26,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,27,28,28,29,30,30,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,46,5,5,5,6,7,7,8,8,8,13,13,13,14,15,15,16,16,16,46,5,5,5,6,7,7,8,8,8,13,13,13,14,15,15,16,16,16,25,26,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,25,26,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,27,28,29,30,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,38,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,38,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,38,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,47,1,2,9,10,48,7,8,15,16,39,27,28,29,30,38,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,47,1,2,9,10,47,1,2,9,10,38,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,38,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,49,50,5,6,8,13,14,16,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,25,26,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,27,28,29,30,25,26,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,27,28,29,30,25,26,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,27,28,29,30,25,26,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,27,28,29,30,38,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,38,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,51,52,0,0,0,0,52,0,53,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,53,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,53,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,53,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,53,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,53,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,56,52,55,55,55],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[7,7]],[[8,8]],[[9,9]],[[10,10]],[[11,11]],[[12,12]],[[13,13]],[[14,14]],[[15,15]],[[16,16]],[[]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],0,[[]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[7,7]],[[8,8]],[[9,9]],[[10,10]],[[11,11]],[[12,12]],[[13,13]],[[14,14]],[[15,15]],[[16,16]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[7,7]],[[8,8]],[[9,9]],[[10,10]],[[11,11]],[[12,12]],[[13,13]],[[14,14]],[[15,15]],[[16,16]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[7,7]],[[8,8]],[[9,9]],[[10,10]],[[11,11]],[[12,12]],[[13,13]],[[14,14]],[[15,15]],[[16,16]],[[]],[[]],[[3,3],3],[[5,5],5],[[6,6],6],[[8,8],8],[[11,11],11],[[13,13],13],[[14,14],14],[[16,16],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17,1],[17,2],[18,3],[18,4],[19,5],[19,6],[20,7],[20,8],[21,9],[21,10],[22,11],[22,12],[23,13],[23,14],[24,15],[24,16],[[]],[1,1],[1,2],[3,3],[3,4],[5,5],[5,6],[7,7],[7,8],[9,9],[9,10],[11,11],[11,12],[13,13],[13,14],[15,15],[15,16],[[15,15],15],[25,25],[26,26],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[27,27],[28,28],[29,29],[30,30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[1,1,31],1],[[2,2,31],2],[[3,3,31],3],[[4,4,31],4],[[5,5,31],5],[[6,6,31],6],[[7,7,31],7],[[8,8,31],8],[[9,9,31],9],[[10,10,31],10],[[11,11,31],11],[[12,12,31],12],[[13,13,31],13],[[14,14,31],14],[[15,15,31],15],[[16,16,31],16],[[1,1],31],[[2,2],31],[[3,3],31],[[4,4],31],[[5,5],31],[[6,6],31],[[7,7],31],[[8,8],31],[[9,9],31],[[10,10],31],[[11,11],31],[[12,12],31],[[13,13],31],[[14,14],31],[[15,15],31],[[16,16],31],[9,9],[[]],[27],[29],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],9],[[],10],[[],11],[[],12],[[],13],[[],14],[[],15],[[],16],[9,9],[[]],[27],[28],[29],[30],[[25,25],32],[[26,26],32],[[1,1],32],[[2,2],32],[[3,3],32],[[4,4],32],[[5,5],32],[[6,6],32],[[7,7],32],[[8,8],32],[[9,9],32],[[10,10],32],[[11,11],32],[[12,12],32],[[13,13],32],[[14,14],32],[[15,15],32],[[16,16],32],[[]],[1,3],[1,4],[1,5],[3,5],[3,6],[1,6],[5,7],[3,7],[1,7],[5,8],[1,8],[3,8],[9,11],[9,12],[9,13],[11,13],[11,14],[9,14],[9,15],[11,15],[13,15],[11,16],[13,16],[9,16],[[]],[1,17],[2,17],[3,18],[4,18],[5,19],[6,19],[7,20],[8,20],[9,21],[10,21],[11,22],[12,22],[13,23],[14,23],[15,24],[16,24],[[25,33],34],[[26,33],34],[[1,33],34],[[2,33],34],[[3,33],34],[[4,33],34],[[5,33],34],[[6,33],34],[[7,33],34],[[8,33],34],[[9,33],34],[[10,33],34],[[11,33],34],[[12,33],34],[[13,33],34],[[14,33],34],[[15,33],34],[[16,33],34],[[27,33],34],[[28,33],34],[[29,33],34],[[30,33],34],[[]],[[]],[13,1],[15,1],[11,1],[9,1],[7,1],[[]],[5,1],[3,1],[[],1],[6,2],[14,2],[8,2],[4,2],[[],2],[10,2],[[],2],[1,2],[12,2],[[]],[16,2],[[],3],[1,3],[5,3],[15,3],[13,3],[11,3],[7,3],[[]],[9,3],[6,4],[2,4],[[],4],[[],4],[8,4],[10,4],[12,4],[14,4],[16,4],[1,4],[[]],[3,4],[13,5],[15,5],[[]],[[],5],[1,5],[3,5],[7,5],[9,5],[11,5],[12,6],[2,6],[10,6],[[],6],[[],6],[5,6],[3,6],[16,6],[14,6],[[]],[4,6],[8,6],[[]],[15,7],[13,7],[11,7],[9,7],[5,7],[3,7],[1,7],[[],7],[[],8],[12,8],[10,8],[6,8],[4,8],[5,8],[16,8],[14,8],[2,8],[7,8],[[]],[[],8],[7,9],[[],9],[1,9],[3,9],[5,9],[11,9],[[]],[13,9],[15,9],[[]],[[],10],[4,10],[6,10],[2,10],[8,10],[12,10],[14,10],[16,10],[9,10],[[],10],[13,11],[7,11],[[],11],[[]],[1,11],[15,11],[3,11],[9,11],[5,11],[11,12],[9,12],[8,12],[10,12],[14,12],[[],12],[2,12],[16,12],[[]],[[],12],[4,12],[6,12],[7,13],[1,13],[[],13],[15,13],[9,13],[5,13],[3,13],[11,13],[[]],[2,14],[[]],[10,14],[12,14],[[],14],[16,14],[4,14],[8,14],[6,14],[[],14],[13,14],[11,14],[5,15],[[],15],[9,15],[7,15],[11,15],[[]],[13,15],[3,15],[1,15],[10,16],[14,16],[[]],[12,16],[[],16],[2,16],[4,16],[13,16],[6,16],[8,16],[15,16],[[],16],[[]],[[]],[27,28],[[]],[[]],[29,30],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],9],[[],10],[[],11],[[],12],[[],13],[[],14],[[],15],[[],16],[[]],[[19,8],5],[[19,5],5],[[19,16],5],[[19,6],6],[[20,7],7],[[20,15],7],[[20,8],8],[[20,5],8],[[20,16],8],[[23,16],13],[[23,5],13],[[23,8],13],[[23,6],14],[[24,15],15],[[24,7],15],[[24,8],16],[[24,16],16],[[24,5],16],[[]],[[19,5,5,5],5],[[19,16,5,5],5],[[19,8,5,5],5],[[19,6,6,6],6],[[20,15,7,7],7],[[20,7,7,7],7],[[20,8,8,8],8],[[20,5,8,8],8],[[20,16,8,8],8],[[23,5,13,13],13],[[23,8,13,13],13],[[23,16,13,13],13],[[23,6,14,14],14],[[24,15,15,15],15],[[24,7,15,15],15],[[24,16,16,16],16],[[24,5,16,16],16],[[24,8,16,16],16],[25],[26],[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[1,32],[2,32],[3,32],[4,32],[5,32],[6,32],[7,32],[8,32],[9,32],[10,32],[11,32],[12,32],[13,32],[14,32],[15,32],[16,32],[[]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[],23],[1,23],[2,23],[9,23],[10,23],[[]],[[7,7],7],[[8,8],8],[[15,15],15],[[16,16],16],[[]],[9,27],[9,28],[10,29],[10,30],[[]],[17,1],[17,2],[18,3],[18,4],[19,5],[19,6],[20,7],[20,8],[21,9],[21,10],[22,11],[22,12],[23,13],[23,14],[24,15],[24,16],[[]],[1,1],[2,2],[9,9],[10,10],[[]],[1,1],[2,2],[9,9],[10,10],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[[1,1],1],[[1,24],1],[[2,24],2],[[2,2],2],[[3,3],3],[[3,24],3],[[4,24],4],[[4,4],4],[[5,24],5],[[5,5],5],[[6,24],6],[[6,6],6],[[7,24],7],[[7,7],7],[[8,24],8],[[8,8],8],[[9,24],9],[[9,9],9],[[10,24],10],[[10,10],10],[[11,24],11],[[11,11],11],[[12,24],12],[[12,12],12],[[13,24],13],[[13,13],13],[[14,14],14],[[14,24],14],[[15,15],15],[[15,24],15],[[16,16],16],[[16,24],16],[[1,24]],[[1,1]],[[2,24]],[[2,2]],[[3,24]],[[3,3]],[[4,4]],[[4,24]],[[5,24]],[[5,5]],[[6,6]],[[6,24]],[[7,24]],[[7,7]],[[8,24]],[[8,8]],[[9,24]],[[9,9]],[[10,24]],[[10,10]],[[11,11]],[[11,24]],[[12,24]],[[12,12]],[[13,13]],[[13,24]],[[14,24]],[[14,14]],[[15,15]],[[15,24]],[[16,24]],[[16,16]],[[1,1],1],[[1,24],1],[[2,2],2],[[2,24],2],[[3,24],3],[[3,3],3],[[4,24],4],[[4,4],4],[[5,5],5],[[5,24],5],[[6,6],6],[[6,24],6],[[7,7],7],[[7,24],7],[[8,8],8],[[8,24],8],[[9,9],9],[[9,24],9],[[10,10],10],[[10,24],10],[[11,24],11],[[11,11],11],[[12,12],12],[[12,24],12],[[13,24],13],[[13,13],13],[[14,14],14],[[14,24],14],[[15,15],15],[[15,24],15],[[16,24],16],[[16,16],16],[[1,24]],[[1,1]],[[2,2]],[[2,24]],[[3,3]],[[3,24]],[[4,24]],[[4,4]],[[5,24]],[[5,5]],[[6,6]],[[6,24]],[[7,24]],[[7,7]],[[8,8]],[[8,24]],[[9,9]],[[9,24]],[[10,10]],[[10,24]],[[11,11]],[[11,24]],[[12,12]],[[12,24]],[[13,13]],[[13,24]],[[14,24]],[[14,14]],[[15,24]],[[15,15]],[[16,24]],[[16,16]],[[]],[[]],[5,5],[6,6],[8,8],[13,13],[14,14],[16,16],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[7,7]],[[8,8]],[[9,9]],[[10,10]],[[11,11]],[[12,12]],[[13,13]],[[14,14]],[[15,15]],[[16,16]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],[[]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[14,14],14],[[15,15],15],[[16,16],16],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[37,35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],35],[[],35],[[],36]],"p":[[3,"I8x16"],[3,"I8x32"],[3,"I16x8"],[3,"I16x16"],[3,"I32x4"],[3,"I32x8"],[3,"I64x2"],[3,"I64x4"],[3,"U8x16"],[3,"U8x32"],[3,"U16x8"],[3,"U16x16"],[3,"U32x4"],[3,"U32x8"],[3,"U64x2"],[3,"U64x4"],[15,"i8"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"u8"],[15,"u16"],[15,"u32"],[15,"u64"],[4,"MicroArchitecture"],[4,"VectorBackend"],[3,"Aes128"],[3,"Aes128EncryptOnly"],[3,"Aes256"],[3,"Aes256EncryptOnly"],[3,"Choice"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[8,"FnMut"],[8,"SimdBase"],[8,"AesBlockCipher"],[8,"Scalar"],[8,"HasVector"],[8,"SimdBase4x"],[8,"SimdBase8x"],[8,"AesBlockCipherDecrypt"],[8,"ExtendingCast"],[8,"SimdBaseGatherable"],[8,"SimdBase8"],[8,"SimdBase64"],[8,"SimdBase32"],[8,"SimdBase4x64"],[13,"Avx2"],[8,"ArrayAdjacentPairs"],[8,"UnrollableArraySize"],[8,"ArrayUnrolledExt"],[4,"ArrayUnrolledOps"],[8,"EvenArrayAdjacentPairs"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
