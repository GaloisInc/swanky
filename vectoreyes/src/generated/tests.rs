// @generated
// rustfmt-format_generated_files: false
// This file was auto-generated by generate.py DO NOT MODIFY
use crate::SimdBase;
use crate::SimdBase16;
use crate::SimdBase32;
use crate::SimdBase4x;
use crate::SimdBase4x64;
use crate::SimdBase64;
use crate::SimdBase8;
use crate::SimdBase8x;
use proptest::prelude::*;
use std::ops::*;
mod scalar;
proptest! { #[test] fn test_carryless_mul_true_true( a in any::<[u64; 2]>(), b in any::<[u64; 2]>(), ) { let scalar_out = { use scalar::*; let a: U64x2 = a.into(); let b: U64x2 = b.into(); a.carryless_mul::<true, true>(b).as_array() }; let platform_out = { use crate::*; let a: U64x2 = a.into(); let b: U64x2 = b.into(); a.carryless_mul::<true, true>(b).as_array() }; prop_assert_eq!(scalar_out, platform_out); } }
proptest! { #[test] fn test_carryless_mul_false_true( a in any::<[u64; 2]>(), b in any::<[u64; 2]>(), ) { let scalar_out = { use scalar::*; let a: U64x2 = a.into(); let b: U64x2 = b.into(); a.carryless_mul::<false, true>(b).as_array() }; let platform_out = { use crate::*; let a: U64x2 = a.into(); let b: U64x2 = b.into(); a.carryless_mul::<false, true>(b).as_array() }; prop_assert_eq!(scalar_out, platform_out); } }
proptest! { #[test] fn test_carryless_mul_true_false( a in any::<[u64; 2]>(), b in any::<[u64; 2]>(), ) { let scalar_out = { use scalar::*; let a: U64x2 = a.into(); let b: U64x2 = b.into(); a.carryless_mul::<true, false>(b).as_array() }; let platform_out = { use crate::*; let a: U64x2 = a.into(); let b: U64x2 = b.into(); a.carryless_mul::<true, false>(b).as_array() }; prop_assert_eq!(scalar_out, platform_out); } }
proptest! { #[test] fn test_carryless_mul_false_false( a in any::<[u64; 2]>(), b in any::<[u64; 2]>(), ) { let scalar_out = { use scalar::*; let a: U64x2 = a.into(); let b: U64x2 = b.into(); a.carryless_mul::<false, false>(b).as_array() }; let platform_out = { use crate::*; let a: U64x2 = a.into(); let b: U64x2 = b.into(); a.carryless_mul::<false, false>(b).as_array() }; prop_assert_eq!(scalar_out, platform_out); } }
mod aes;
mod i16x16;
mod i16x8;
mod i32x4;
mod i32x8;
mod i64x2;
mod i64x4;
mod i8x16;
mod i8x32;
mod u16x16;
mod u16x8;
mod u32x4;
mod u32x8;
mod u64x2;
mod u64x4;
mod u8x16;
mod u8x32;
