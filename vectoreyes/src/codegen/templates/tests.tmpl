{% import 'core.tmpl' as core %}
{% import 'tests/proptest.tmpl' as proptest %}
{% set proptest_eq_scalar = proptest.proptest_eq_scalar %}

use proptest::prelude::*;
use std::ops::*;
use crate::SimdBase;
use crate::SimdBase8;
use crate::SimdBase16;
use crate::SimdBase32;
use crate::SimdBase64;
use crate::SimdBase4x64;
use crate::SimdBase8x;
use crate::SimdBase4x;

mod scalar;

{% for hi0 in ['true', 'false'] %}
    {% for hi1 in ['true', 'false'] %}
        {% call proptest_eq_scalar("carryless_mul_" ~ hi1 ~ "_" ~ hi0, {'a': VectorType(core.u64, 2), 'b': VectorType(core.u64, 2)}) %}
            a.carryless_mul::<{{hi1}}, {{hi0}}>(b).as_array()
        {% endcall %}
    {% endfor %}
{% endfor %}

{% for ty in VECTOR_TYPES %}
mod {{ (ty ~ "").lower() }};
{% endfor %}

mod aes;
