impl {{ty}} {
    /// Create a vector from an array.
    ///
    /// Unlike the `From` trait function, the `from_array` function is `const`.
    /// # Example
    /// ```
    /// # use vectoreyes::*;
    /// const MY_EXTREMELY_FUN_VALUE: {{ty}} =
    ///     {{ty}}::from_array({{range(ty.count) | list}});
    /// for (i, value) in MY_EXTREMELY_FUN_VALUE.as_array().iter().copied().enumerate() {
    ///     assert_eq!(i as {{ty.ty}}, value);
    /// }
    /// ```
    {% call(scalar, avx2) fn(
        "from_array",
        {"array": ty.array},
        returns=ty,
        const=True,
        pub=True,
        doc_scalar_equiv=False,
    ) %}
    {% call scalar() %}
        {{ty}}(array)
    {% endcall %}
    {% call(avx2i) avx2() %}
        {{ty}}(unsafe {
            std::mem::transmute::<{{ty.array}}, {{ty}}Internal>(array)
        })
    {% endcall %}
    {% endcall %}
}

