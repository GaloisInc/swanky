#![allow(unused_variables, unused_mut)]

use crate::array_utils::*;

{% for count in range(33) %}
    {% macro extract_elems(name1, name2=None) %}
        match {{name1}} {
            [
                {% for i in range(count) %}
                    {{name1}}_{{i}},
                {% endfor %}
            ] => {
                {% if name2 %}
                    {% set my_caller = caller %}
                    {% call extract_elems(name2) %}
                        {{my_caller()}}
                    {% endcall %}
                {% else %}
                    {{caller()}}
                {% endif %}
            }
        }
    {% endmacro %}
    
    impl UnrollableArraySize<{{count}}> for ArrayUnrolledOps {
        #[inline(always)]
        fn array_generate<T, F: FnMut(usize) -> T>(mut f: F) -> [T; {{count}}] {
            {% for i in range(count) %}
                let x_{{i}} = f({{i}});
            {% endfor %}
            [
                {% for i in range(count) %}
                    x_{{i}},
                {% endfor %}
            ]
        }
    
        #[inline(always)]
        fn array_map<T, U, F: FnMut(T) -> U>(arr: [T; {{count}}], mut f: F) -> [U; {{count}}] {
            {% call extract_elems("arr") %}
                [
                    {% for i in range(count) %}
                        f(arr_{{i}}),
                    {% endfor %}
                ]
            {% endcall %}
        }

        #[inline(always)]
        fn array_map_result<T, U, E, F: FnMut(T) -> Result<U, E>>(arr: [T; {{count}}], mut f: F) -> Result<[U; {{count}}], E> {
            {% call extract_elems("arr") %}
                Ok([
                    {% for i in range(count) %}
                        f(arr_{{i}})?,
                    {% endfor %}
                ])
            {% endcall %}
        }
        
        #[inline(always)]
        fn array_enumerate<T>(arr: [T; {{count}}]) -> [(usize, T); {{count}}] {
            {% call extract_elems("arr") %}
                [
                    {% for i in range(count) %}
                        ({{i}}, arr_{{i}}),
                    {% endfor %}
                ]
            {% endcall %}
        }
        
        #[inline(always)]
        fn array_fold<T, U, F: FnMut(U, T) -> U>(arr: [T; {{count}}], init: U, mut f: F) -> U {
            let mut acu = init;
            {% call extract_elems("arr") %}
                {% for i in range(count) %}
                    acu = f(acu, arr_{{i}});
                {% endfor %}
            {% endcall %}
            acu
        }
        
        #[inline(always)]
        fn array_zip<T1, T2>(arr1: [T1; {{count}}], arr2: [T2; {{count}}]) -> [(T1, T2); {{count}}] {
            {% call extract_elems("arr1", "arr2") %}
                [
                    {% for i in range(count) %}
                        (arr1_{{i}}, arr2_{{i}}),
                    {% endfor %}
                ]
            {% endcall %}
        }
        #[inline(always)]
        fn array_as_ref<T>(arr: &[T; {{count}}]) -> [&T; {{count}}] {
            {% call extract_elems("arr") %}
                [
                    {% for i in range(count) %}
                        arr_{{i}},
                    {% endfor %}
                ]
            {% endcall %}
        }
        #[inline(always)]
        fn array_as_mut<T>(arr: &mut [T; {{count}}]) -> [&mut T; {{count}}] {
            {% call extract_elems("arr") %}
                [
                    {% for i in range(count) %}
                        arr_{{i}},
                    {% endfor %}
                ]
            {% endcall %}
        }
    }
    
    impl<T> ArrayAdjacentPairs for [T; {{count}}] {
        type T = T;
        type AdjacentPairs = [(T, T); {{ (count // 2) + (count % 2) }}];
        #[inline(always)]
        #[allow(unused_variables)]
        fn pair_adjacent_maybe_odd(self, fallback: T) -> Self::AdjacentPairs {
            {% call extract_elems("self") %}
                [
                    {% for i in range(count // 2) %}
                        (self_{{i * 2}}, self_{{i * 2 + 1}}),
                    {% endfor %}
                    {% if (count % 2) != 0 %}
                        (self_{{count - 1}}, fallback),
                    {% endif %}
                ]
            {% endcall %}
        }
    }
    {% if (count % 2) == 0 %}
        impl<T> EvenArrayAdjacentPairs for [T; {{count}}] {
            #[inline(always)]
            fn pair_adjacent(self) -> Self::AdjacentPairs {
                {% call extract_elems("self") %}
                    [
                        {% for i in range(count // 2) %}
                            (self_{{i * 2}}, self_{{i * 2 + 1}}),
                        {% endfor %}
                    ]
                {% endcall %}
            }
        }
    {% endif %}
{% endfor %}
